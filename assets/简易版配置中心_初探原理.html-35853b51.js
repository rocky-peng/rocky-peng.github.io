import{_ as r,$ as o,a0 as l,a1 as e,a3 as t,a4 as n,a5 as p,a2 as i,w as s}from"./framework-16d560c6.js";const c={},d=p(`<h2 id="本地配置的情况" tabindex="-1"><a class="header-anchor" href="#本地配置的情况" aria-hidden="true">#</a> 本地配置的情况</h2><p>一般情况下，在开始一个新的项目的时候，可能我们多半会把配置信息写在工程目录下，使用不同的文件来配置不同环境下的配置。比如：</p><figure><img src="https://cdn.justdopay.com/xiaoshujiang/1629081604491.png" alt="不同环境的配置文件" tabindex="0" loading="lazy"><figcaption>不同环境的配置文件</figcaption></figure><p>然后在spring的配置文件会出现类似这样的配置：</p><figure><img src="https://cdn.justdopay.com/xiaoshujiang/1629081610453.png" alt="spring的配置" tabindex="0" loading="lazy"><figcaption>spring的配置</figcaption></figure><p>这样的处理有一个弊端，那就是一些系统的敏感信息也会写入在配置文件中，比如我们公司之前的配置：</p><figure><img src="https://cdn.justdopay.com/xiaoshujiang/1629081615827.png" alt="之前的配置" tabindex="0" loading="lazy"><figcaption>之前的配置</figcaption></figure><p>上面的诸如 alipayAppPrivateKey alipayAliPublicKey 这些敏感信息从安全角度不应该出现在配置文件中的，要知道有了这些信息是可以通过api进行转账操作的。于是如果有一个配置中心，我们只需要把配置信息放到配置中心里就可以解决这个问题了。</p><p>现在工业上有很多开源的配置中心，比如Apollo 、Spring Cloud Config等等，但由于本人所在公司资源精力有限，决定自己做一个简易版的配置服务。通过这个简易版的配置服务，我们也能窥探现在成熟的功能更加完善的配置中心是怎样的一个原理。</p><h2 id="整体设计" tabindex="-1"><a class="header-anchor" href="#整体设计" aria-hidden="true">#</a> 整体设计</h2><figure><img src="https://cdn.justdopay.com/xiaoshujiang/1629081624435.png" alt="enter description here" tabindex="0" loading="lazy"><figcaption>enter description here</figcaption></figure><p>业务服务器在启动的时候（其实不一定，这里为了简化只在启动的时候拉取）向配置服务器拉取配置信息，然后进行初始化等一系列操作。</p><p>交互的方式就是很普通的http接口（也可以设计为tcp等通信方式），具体设计如下：</p><p>请求参数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- appName ：应用的名字
- mode ：拉取什么环境的配置，比如local test prod
- appConfigSecret ：盐 ，主要为了安全性，可以周期性的更换这个
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回值： 这里返回值设置为string, string的格式为了方便看和兼容之前的配置，采用了properties文件的方式。业务服务器拉取配置后，进行对应格式的解析。</p><h2 id="配置服务器" tabindex="-1"><a class="header-anchor" href="#配置服务器" aria-hidden="true">#</a> 配置服务器</h2><p>配置信息的存储为了简单，也采用了mysql进行存储。这里就剔除了配置信息回滚的功能，只完成核心功能。 表结构如下：</p><figure><img src="https://cdn.justdopay.com/xiaoshujiang/1629081650313.png" alt="enter description here" tabindex="0" loading="lazy"><figcaption>enter description here</figcaption></figure><p>app_name + app_mode + app_config_secret 三个信息组合成一个联合唯一索引（字段长度也许不合理哈，这里就没有深究这个了），通过这三个信息来查询 app_config 字段的信息。app_config 字段的格式就是properties形式的字符串。</p><p>通过这三个字段读取配置信息的这个http接口就不用赘述了是吧（这个接口根据自身需要可以添加其他的一些安全策略）</p><p>写好接口后，发布到内网或者公网作为一个独立的服务即可。</p><h2 id="业务服务器" tabindex="-1"><a class="header-anchor" href="#业务服务器" aria-hidden="true">#</a> 业务服务器</h2><p>在这块我们的核心问题就是写代码去请求配置服务，拉取配置信息。</p><p>这里有个关键类：PropertyPlaceholderConfigurer ，我们只需要继承这个类，重写下 processProperties 或者其他方法即可。我这里就处理得很简单了，代码如下:</p><figure><img src="https://cdn.justdopay.com/xiaoshujiang/1629081792369.png" alt="enter description here" tabindex="0" loading="lazy"><figcaption>enter description here</figcaption></figure><figure><img src="https://cdn.justdopay.com/xiaoshujiang/1629081800286.png" alt="enter description here" tabindex="0" loading="lazy"><figcaption>enter description here</figcaption></figure><p>代码中可以看到，我这里还是对项目中的配置文件保留了一个基本的配置，也就是配置文件还是有，但只保留必要的几个配置，如下</p><figure><img src="https://cdn.justdopay.com/xiaoshujiang/1629081804949.png" alt="enter description here" tabindex="0" loading="lazy"><figcaption>enter description here</figcaption></figure><p>前面三个参数时配置服务需要的，第四个参数是指定配置服务器的host地址</p><p>剩下是日志相关的配置。</p><p>代码有了，下面就是更改spirng的配置： 把之前所有用到</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;util:properties id=&quot;config&quot; location=&quot;classpath:config.properties&quot;/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>的地方都替换为：</p><figure><img src="https://cdn.justdopay.com/xiaoshujiang/1629081808721.png" alt="enter description here" tabindex="0" loading="lazy"><figcaption>enter description here</figcaption></figure><p>然后还需改一个地方，那就是把引用配置的地方改为<span class="katex-error" title="ParseError: KaTeX parse error: Expected &#39;EOF&#39;, got &#39;#&#39; at position 4: 形式（#̲和" style="color:#cc0000;"><span class="cjk_fallback">形式（#和</span></span>的区别，这里也不赘述了），如下图：</p><figure><img src="https://cdn.justdopay.com/xiaoshujiang/1629081811982.png" alt="之前的写法" tabindex="0" loading="lazy"><figcaption>之前的写法</figcaption></figure><p>改为： <img src="https://cdn.justdopay.com/xiaoshujiang/1629081823564.png" alt="改后的写法" loading="lazy"></p><h2 id="万事俱备只欠东风" tabindex="-1"><a class="header-anchor" href="#万事俱备只欠东风" aria-hidden="true">#</a> 万事俱备只欠东风</h2><p>往配置服务的数据表里添加对应的配置信息，搞定。</p><p>感兴趣的朋友可以加微信群。</p><br><h2 id="系统推荐" tabindex="-1"><a class="header-anchor" href="#系统推荐" aria-hidden="true">#</a> 系统推荐</h2>`,43),g=e("p",null,[e("br"),e("br"),e("br"),e("br"),e("br"),e("br")],-1),u=e("hr",null,null,-1),h=e("hr",null,null,-1),f=e("ul",null,[e("li",null,[e("strong",null,"随机毒鸡汤"),i("：如果生活欺骗了你，不要着急 — 拿出美颜相机，去欺骗生活。 "),e("br"),e("br"),e("img",{src:"https://tuapi.eees.cc/api.php?category=fengjing&type=302&uuid=83390494-906c-4178-9b8a-9c51c76a47fb",alt:"",loading:"lazy"})])],-1);function m(E,_){const a=s("RouterLink");return o(),l("div",null,[d,e("ul",null,[e("li",null,[t(a,{to:"/software/unclassified/Git%E7%AC%94%E8%AE%B0.html"},{default:n(()=>[i("Git笔记")]),_:1})]),e("li",null,[t(a,{to:"/software/unclassified/Cordova+Umi%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4.html"},{default:n(()=>[i("Cordova+Umi项目搭建步骤")]),_:1})]),e("li",null,[t(a,{to:"/other/%E6%9D%A5%E4%B8%AAJVM%E5%86%B7%E7%9F%A5%E8%AF%86.html"},{default:n(()=>[i("来个JVM冷知识")]),_:1})]),e("li",null,[t(a,{to:"/software/unclassified/%E5%90%84%E7%A7%8D%E7%BD%91%E5%85%B3%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95.html"},{default:n(()=>[i("各种网关性能测试")]),_:1})]),e("li",null,[t(a,{to:"/other/Nacos-Spring%20Gateway-Spring%20boot%E6%97%A0%E6%84%9F%E5%8F%91%E5%B8%83.html"},{default:n(()=>[i("Nacos-Spring Gateway-Spring boot无感发布")]),_:1})]),e("li",null,[t(a,{to:"/software/spring/Spring%20Cloud%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E6%8A%80%E6%9C%AF%E6%A6%82%E8%A7%88%E3%80%90Finchley%20%E7%89%88%E3%80%91.html"},{default:n(()=>[i("Spring Cloud（一）：服务治理技术概览【Finchley 版】")]),_:1})]),e("li",null,[t(a,{to:"/software/unclassified/NGINX.html"},{default:n(()=>[i("NGINX")]),_:1})]),e("li",null,[t(a,{to:"/other/Cornell%20Notes%20System.html"},{default:n(()=>[i("Cornell Notes System")]),_:1})]),e("li",null,[t(a,{to:"/other/PGSQL%20GIN%E7%B4%A2%E5%BC%95%E2%80%9C%E5%A4%B1%E6%95%88%E2%80%9D.html"},{default:n(()=>[i("PGSQL GIN索引“失效”")]),_:1})]),e("li",null,[t(a,{to:"/software/maccms/MAC%20CMS.html"},{default:n(()=>[i("MAC CMS")]),_:1})]),e("li",null,[t(a,{to:"/software/docker/Docker%E7%AC%94%E8%AE%B0.html"},{default:n(()=>[i("Docker笔记")]),_:1})]),e("li",null,[t(a,{to:"/software/jvm/JVM%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html"},{default:n(()=>[i("JVM异常处理")]),_:1})])]),g,u,h,f])}const b=r(c,[["render",m],["__file","简易版配置中心_初探原理.html.vue"]]);export{b as default};
