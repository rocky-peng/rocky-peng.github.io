import{_ as p,$ as o,a0 as c,a1 as n,a3 as t,a4 as e,a5 as l,a2 as s,w as i}from"./framework-b3a0f150.js";const u={},r=l(`<h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><p>一句话总结：一个或多个线程，等待其他多个线程执行完毕后才继续执行。</p><p>具体场景：</p><ol><li>某个线程等待其他多个线程执行完毕才能继续执行。就好比一个公交车，司机师傅需要等到所有人都上车后才能启动起步。</li><li>发令枪：就是多个线程等待某个线程执行完毕才能继续执行。</li><li>死锁检测：一个非常方便的使用场景是，你可以使用 n 个线程访问共享资源，在每次测试阶段的线程数目是不同的，并尝试产生死锁。（这个没有理解到）</li></ol><h2 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h2><p>分析代码前，建议我们我们先自己根据对AQS的理解和对CountDownLatch的使用创建， 先尝试猜测一下其内部是如何实现的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>你的猜测
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面开始正式讲CDL的代码实现。 同样的，不用质疑CDL内部肯定使用了AQS（没看代码前这一点是可以分析得出的） 我们直接看CDL内部是如何利用AQS的。</p><h3 id="sync类" tabindex="-1"><a class="header-anchor" href="#sync类" aria-hidden="true">#</a> Sync类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">4982264981922014374L</span><span class="token punctuation">;</span>

    <span class="token class-name">Sync</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setState</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//1. 利用的是AQS的共享锁模式</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryReleaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Decrement count; signal when transition to zero</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> nextc <span class="token operator">=</span> c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> nextc<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> nextc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="countdownlatch类" tabindex="-1"><a class="header-anchor" href="#countdownlatch类" aria-hidden="true">#</a> CountDownLatch类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Sync</span> sync<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;count &lt; 0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sync</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    sync<span class="token punctuation">.</span><span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sync<span class="token punctuation">.</span><span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>CDL利用的是AQS的共享锁，在实例化的时候，会把state设置为count的值。 await方法就是获得共享锁，但必须要等到state的值为0才能成功获得共享锁，否则进入同步队列等待 countDown方法就是在释放共享锁，释放逻辑就是对state的值减一，直到state的值为0才会成功释放</p><p>个人认为实现非常巧妙，在看代码前我推测出了肯定用了AQS的共享锁（这点是推测成功了）， 但同时怀疑使用了AQS的条件队列（这点当时推测的时候不确定，因为不记得共享锁能不能使用条件队列了）， 后来回顾了下AQS的条件队列，得知<strong>只有独占锁才能使用条件队列</strong>，于是又开始推测CDL的内部实现，可惜没能想出来😂</p><h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h2><h3 id="countdownlatch-相常见面试题" tabindex="-1"><a class="header-anchor" href="#countdownlatch-相常见面试题" aria-hidden="true">#</a> CountDownLatch 相常见面试题：</h3><ol><li><p>解释一下 CountDownLatch 概念？</p></li><li><p>CountDownLatch 和 CyclicBarrier 的不同之处？</p></li></ol><br><h2 id="系统推荐" tabindex="-1"><a class="header-anchor" href="#系统推荐" aria-hidden="true">#</a> 系统推荐</h2>`,20),d=n("p",null,[n("br"),n("br"),n("br"),n("br"),n("br"),n("br")],-1),k=n("hr",null,null,-1),v=n("hr",null,null,-1),h=n("ul",null,[n("li",null,[n("strong",null,"随机毒鸡汤"),s("：如果肯花一点点时间了解我，你就会发现，你浪费了一点点时间。 "),n("br"),n("br"),n("img",{src:"https://images.pexels.com/photos/16228208/pexels-photo-16228208.jpeg?auto=compress&cs=tinysrgb&h=650&w=940",alt:"Elderly men engaged in a game of chess against a traditional Beijing wall.",loading:"lazy"})])],-1);function m(E,b){const a=i("RouterLink");return o(),c("div",null,[r,n("ul",null,[n("li",null,[t(a,{to:"/software/unclassified/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F.html"},{default:e(()=>[s("记一次内存泄漏")]),_:1})]),n("li",null,[t(a,{to:"/other/%E6%9D%A5%E4%B8%AAJVM%E5%86%B7%E7%9F%A5%E8%AF%86.html"},{default:e(()=>[s("来个JVM冷知识")]),_:1})]),n("li",null,[t(a,{to:"/software/unclassified/Btrace%E5%85%A5%E9%97%A8.html"},{default:e(()=>[s("Btrace入门")]),_:1})]),n("li",null,[t(a,{to:"/software/spring/Spring%20Cloud%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E6%8A%80%E6%9C%AF%E6%A6%82%E8%A7%88%E3%80%90Finchley%20%E7%89%88%E3%80%91.html"},{default:e(()=>[s("Spring Cloud（一）：服务治理技术概览【Finchley 版】")]),_:1})]),n("li",null,[t(a,{to:"/software/jvm/JVM%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE.html"},{default:e(()=>[s("JVM参数设置")]),_:1})]),n("li",null,[t(a,{to:"/other/%E9%9A%8F%E8%AE%B0.html"},{default:e(()=>[s("随记")]),_:1})]),n("li",null,[t(a,{to:"/other/%E6%8F%90%E5%8F%96Docker%E9%95%9C%E5%83%8F%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6.html"},{default:e(()=>[s("提取Docker镜像中的文件")]),_:1})]),n("li",null,[t(a,{to:"/software/unclassified/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9git%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E4%B8%AD%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1.html"},{default:e(()=>[s("批量修改git历史记录中的用户名和邮箱")]),_:1})]),n("li",null,[t(a,{to:"/other/JetBrains-License-Server.html"},{default:e(()=>[s("JetBrains-License-Server")]),_:1})]),n("li",null,[t(a,{to:"/software/unclassified/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF.html"},{default:e(()=>[s("前后端常用技术")]),_:1})]),n("li",null,[t(a,{to:"/other/PostgreSQL%20JSON%E7%B1%BB%E5%9E%8B%E5%AD%97%E6%AE%B5%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C.html"},{default:e(()=>[s("PostgreSQL JSON类型字段常用操作")]),_:1})]),n("li",null,[t(a,{to:"/software/unclassified/BBR%E5%8A%A0%E9%80%9F.html"},{default:e(()=>[s("BBR加速")]),_:1})])]),d,k,v,h])}const y=p(u,[["render",m],["__file","CountDownLatch源码解读.html.vue"]]);export{y as default};
