import{_ as l,$ as d,a0 as h,a1 as a,a2 as e,a3 as t,a4 as i,a5 as s,w as r}from"./framework-b3a0f150.js";const c="/assets/431974973335700-802dc2ee.png",p="/assets/432626452724700-6cf40815.png",u="/assets/432630809150500-738962c1.png",f="/assets/432770360556700-53975437.png",g="/assets/432832006568400-bd5facd8.png",_="/assets/432956352937000-aa634929.png",E="/assets/433052161706700-adfd3510.png",m="/assets/433237435722500-7630af31.png",b="/assets/431654460959200-9e29d415.png",k="/assets/433658683222900-eb6e61c3.png",B={},A=s('<h2 id="先说原理" tabindex="-1"><a class="header-anchor" href="#先说原理" aria-hidden="true">#</a> 先说原理</h2><p>原理就是，模拟notion的&quot;export all workspace content&quot;按钮的请求，得到notion返回的zip压缩包。</p><p>拿到zip压缩包后怎么处理，就看各自的需求了。</p><p>我这里拿到zip压缩包后的操作是：自动解压并推送到github的私有仓库中</p><h2 id="具体步骤" tabindex="-1"><a class="header-anchor" href="#具体步骤" aria-hidden="true">#</a> 具体步骤</h2><h3 id="一、创建或准备自己的私有仓库" tabindex="-1"><a class="header-anchor" href="#一、创建或准备自己的私有仓库" aria-hidden="true">#</a> 一、创建或准备自己的私有仓库</h3><p>可以是新建的私有仓库，也可以是已有仓库，但无论新建还是已有，都不能是空仓库，哪怕随便提交一个文件都可以。然后分支名要命名为main</p><p>我这里是创建的新仓库，仓库名就是： my-notion-backup （可以不一样，根据自身情况定义即可）</p><h3 id="二、fork仓库" tabindex="-1"><a class="header-anchor" href="#二、fork仓库" aria-hidden="true">#</a> 二、fork仓库</h3><p>这个仓库的作用就是完成上面说的工作：定时模拟notion导出请求，解压，推送</p>',10),x={href:"https://github.com/richartkeil/notion-guardian",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/rocky-peng/Keenster-notion-guardian",target:"_blank",rel:"noopener noreferrer"},y=a("h3",{id:"三、准备以下参数",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#三、准备以下参数","aria-hidden":"true"},"#"),e(" 三、准备以下参数")],-1),C=a("h4",{id:"repo-username",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#repo-username","aria-hidden":"true"},"#"),e(" REPO_USERNAME")],-1),N=a("p",null,"这个参数就是自己github的用户名，就是步骤二中自己fork的仓库地址中用户名那一节。",-1),z={href:"https://github.com/rocky-peng/Keenster-notion-guardian%EF%BC%8C%E9%82%A3rocky-peng%E5%B0%B1%E6%98%AFREPO_USERNAME",target:"_blank",rel:"noopener noreferrer"},O=a("h4",{id:"repo-personal-access-token",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#repo-personal-access-token","aria-hidden":"true"},"#"),e(" REPO_PERSONAL_ACCESS_TOKEN")],-1),R={href:"https://github.com/settings/tokens/new",target:"_blank",rel:"noopener noreferrer"},S=a("img",{src:c,alt:"",loading:"lazy"},null,-1),F=s('<h4 id="repo-name" tabindex="-1"><a class="header-anchor" href="#repo-name" aria-hidden="true">#</a> REPO_NAME</h4><p>这个参数就是步骤一中自己的私有仓库名字，我这里就是： my-notion-backup</p><h4 id="repo-email" tabindex="-1"><a class="header-anchor" href="#repo-email" aria-hidden="true">#</a> REPO_EMAIL</h4><p>这个参数一般配置为自己的邮箱，用于定义推送到私有仓库的用户。自己常用的邮箱即可</p><h4 id="notion-space-id" tabindex="-1"><a class="header-anchor" href="#notion-space-id" aria-hidden="true">#</a> NOTION_SPACE_ID</h4><p>进入自己的notion。看下图：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图中缺失的3：</p><p>浏览器右键并点击&quot;检查&quot;</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后找到network或者网络，如下：</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时步骤3完成，可以继续步骤4</p><p>然后会出现弹框，如下：</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>继续点击红框按钮</p><p>然后此时在network或者网络下方找到下面的请求：</p><figure><img src="'+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>右下角的spaceId，就是我们要找的值，记录下来</p><h4 id="notion-token" tabindex="-1"><a class="header-anchor" href="#notion-token" aria-hidden="true">#</a> NOTION_TOKEN</h4><p><img src="'+m+'" alt="" loading="lazy"> 红框中 token_v2的值就是了，记录下来</p><h4 id="notion-user-id" tabindex="-1"><a class="header-anchor" href="#notion-user-id" aria-hidden="true">#</a> NOTION_USER_ID</h4><p>上图中红框中 notion_user_id 的值就是了，记录下来</p><h3 id="四、配置刚刚fork的仓库" tabindex="-1"><a class="header-anchor" href="#四、配置刚刚fork的仓库" aria-hidden="true">#</a> 四、配置刚刚fork的仓库</h3><h4 id="配置参数" tabindex="-1"><a class="header-anchor" href="#配置参数" aria-hidden="true">#</a> 配置参数</h4><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>按照上图的操作，依次创建上面的准备的参数，最后类似上图上图</p><h4 id="开启workflow" tabindex="-1"><a class="header-anchor" href="#开启workflow" aria-hidden="true">#</a> 开启workflow</h4><p>单击fork仓库上的“Actions”选项卡，然后单击启用按钮。</p><p>在左侧边栏上单击“Backup Notion Workspace”工作流程。通知将告诉您“计划的操作”已禁用，因此请继续并单击按钮以启用它们。</p><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>此时任意往fork的仓库中提交一点东西，就会触发actions动作</p><p>等待一会，刷新自己的私有仓库，看看是否有文件生成，类似如下：</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="修改定时备份频率" tabindex="-1"><a class="header-anchor" href="#修改定时备份频率" aria-hidden="true">#</a> 修改定时备份频率</h2><p>fork仓库默认是每天0点0分备份一次。可以通过修改工作流配置文件修改备份频率。一般一天一次足够</p><br><h2 id="系统推荐" tabindex="-1"><a class="header-anchor" href="#系统推荐" aria-hidden="true">#</a> 系统推荐</h2>',39),I=a("p",null,[a("br"),a("br"),a("br"),a("br"),a("br"),a("br")],-1),P=a("hr",null,null,-1),L=a("hr",null,null,-1),v=a("ul",null,[a("li",null,[a("strong",null,"随机毒鸡汤"),e("：别人吃不下了叫没胃口，我吃不下了叫浪费粮食。 "),a("br"),a("br"),a("img",{src:"https://tuapi.eees.cc/api.php?category=fengjing&type=302&uuid=30afe51a-d509-48b1-b651-82a5aaf6a674",alt:"",loading:"lazy"})])],-1);function M(D,q){const o=r("ExternalLinkIcon"),n=r("RouterLink");return d(),h("div",null,[A,a("p",null,[e("仓库地址："),a("a",x,[e("https://github.com/richartkeil/notion-guardian"),t(o)])]),a("p",null,[e("也可以fork楼主的仓库："),a("a",w,[e("https://github.com/rocky-peng/Keenster-notion-guardian"),t(o)]),e(" （修改了中文时区并默认为子页面创建文件夹，方便管理）")]),y,C,N,a("p",null,[e("比如我的仓库地址："),a("a",z,[e("https://github.com/rocky-peng/Keenster-notion-guardian，那rocky-peng就是REPO_USERNAME"),t(o)])]),O,a("p",null,[e("这个参数在自己的github上创建，这里提供一个便捷链接： "),a("a",R,[e("https://github.com/settings/tokens/new"),t(o)]),S]),F,a("ul",null,[a("li",null,[t(n,{to:"/software/unclassified/Cordova+Umi%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4.html"},{default:i(()=>[e("Cordova+Umi项目搭建步骤")]),_:1})]),a("li",null,[t(n,{to:"/software/spring/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html"},{default:i(()=>[e("常见问题")]),_:1})]),a("li",null,[t(n,{to:"/software/java-basic/synchronized%E5%8E%9F%E7%90%86%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90.html"},{default:i(()=>[e("synchronized原理深度剖析")]),_:1})]),a("li",null,[t(n,{to:"/software/middleware/mysql/MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"},{default:i(()=>[e("MySQL常用命令")]),_:1})]),a("li",null,[t(n,{to:"/software/spring/Spring%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%85%B3%E9%94%AE%E7%82%B9.html"},{default:i(()=>[e("Spring框架源码关键点")]),_:1})]),a("li",null,[t(n,{to:"/software/java-basic/%E5%BC%B1%E5%BC%95%E7%94%A8%E7%A4%BA%E4%BE%8B.html"},{default:i(()=>[e("弱引用示例")]),_:1})]),a("li",null,[t(n,{to:"/software/spring/Spring%20Cloud%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E6%8A%80%E6%9C%AF%E6%A6%82%E8%A7%88%E3%80%90Finchley%20%E7%89%88%E3%80%91.html"},{default:i(()=>[e("Spring Cloud（一）：服务治理技术概览【Finchley 版】")]),_:1})]),a("li",null,[t(n,{to:"/software/middleware/mq/kafka.html"},{default:i(()=>[e("kafka")]),_:1})]),a("li",null,[t(n,{to:"/software/unclassified/PasteImageIntoMarkdown%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91.html"},{default:i(()=>[e("PasteImageIntoMarkdown插件开发")]),_:1})]),a("li",null,[t(n,{to:"/other/Paxos%E7%AE%97%E6%B3%95.html"},{default:i(()=>[e("Paxos算法")]),_:1})]),a("li",null,[t(n,{to:"/software/java-basic/ReentrantLock%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB.html"},{default:i(()=>[e("ReentrantLock源码解读")]),_:1})]),a("li",null,[t(n,{to:"/software/docker/Docker%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1%E6%96%B9%E6%A1%88.html"},{default:i(()=>[e("Docker跨主机通信方案")]),_:1})])]),I,P,L,v])}const T=l(B,[["render",M],["__file","Notion笔记定时备份.html.vue"]]);export{T as default};
