import{_ as c,$ as i,a0 as u,a1 as n,a2 as s,a3 as a,a4 as t,a5 as o,w as p}from"./framework-8c4427da.js";const r={},d=o(`<ol><li><p>top -p pid 看到某个进程占用的物理内存，以及创建的线程数，也可以通过Shift+f命令对指定列进行排序，从而找到异常线程的pid。然后可以通过jstack pid | grep 命令找到这个线程在做的事，从而进行排查。</p></li><li><p>ps axu | grep -E &#39;pid|USER&#39; 通过这个方式也能看到某个进程占用的物理内存，结果和top命令是匹配的。</p></li><li><p>-Xms300m -Xmx300m 同时设置了这两个参数并不代表jvm一启动就会向os申请300m的内存（是指不会立即占用300m内存）。同理，-XX:MaxPermSize=300m -XX: PermSize=300m也是一样的，也不会立即占用300m内存。 具体当前jvm instance占用了多少内存（这里值堆内内存），可以通过jmap -heap pid查看。</p></li><li><p>jmap -heap pid 这个命令能查看当前jvm各个堆区域使用情况，把各个区域使用空间累加便得到当前jvm程序占用了多少内存。注意是堆内内存，这个命令是不能看到jvm对堆外内存的使用情况的。比如：</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jmap <span class="token parameter variable">-heap</span> <span class="token number">3273</span>
Attaching to process ID <span class="token number">3273</span>, please wait<span class="token punctuation">..</span>.
Debugger attached successfully.
Server compiler detected.
JVM version is <span class="token number">24.80</span>-b11

using thread-local object allocation.
Parallel GC with <span class="token number">2</span> thread<span class="token punctuation">(</span>s<span class="token punctuation">)</span>

Heap Configuration:
   MinHeapFreeRatio <span class="token operator">=</span> <span class="token number">0</span>
   MaxHeapFreeRatio <span class="token operator">=</span> <span class="token number">100</span>
   MaxHeapSize      <span class="token operator">=</span> <span class="token number">314572800</span> <span class="token punctuation">(</span><span class="token number">300</span>.0MB<span class="token punctuation">)</span>
   NewSize          <span class="token operator">=</span> <span class="token number">209715200</span> <span class="token punctuation">(</span><span class="token number">200</span>.0MB<span class="token punctuation">)</span>
   MaxNewSize       <span class="token operator">=</span> <span class="token number">209715200</span> <span class="token punctuation">(</span><span class="token number">200</span>.0MB<span class="token punctuation">)</span>
   OldSize          <span class="token operator">=</span> <span class="token number">5439488</span> <span class="token punctuation">(</span><span class="token number">5</span>.1875MB<span class="token punctuation">)</span>
   NewRatio         <span class="token operator">=</span> <span class="token number">2</span>
   SurvivorRatio    <span class="token operator">=</span> <span class="token number">8</span>
   PermSize         <span class="token operator">=</span> <span class="token number">104857600</span> <span class="token punctuation">(</span><span class="token number">100</span>.0MB<span class="token punctuation">)</span>
   MaxPermSize      <span class="token operator">=</span> <span class="token number">104857600</span> <span class="token punctuation">(</span><span class="token number">100</span>.0MB<span class="token punctuation">)</span>
   G1HeapRegionSize <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0</span>.0MB<span class="token punctuation">)</span>

Heap Usage:
PS Young Generation
Eden Space:
   capacity <span class="token operator">=</span> <span class="token number">167772160</span> <span class="token punctuation">(</span><span class="token number">160</span>.0MB<span class="token punctuation">)</span>
   used     <span class="token operator">=</span> <span class="token number">165346688</span> <span class="token punctuation">(</span><span class="token number">157</span>.6868896484375MB<span class="token punctuation">)</span>
   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">2425472</span> <span class="token punctuation">(</span><span class="token number">2</span>.3131103515625MB<span class="token punctuation">)</span>
   <span class="token number">98.55430603027344</span>% used
From Space:
   capacity <span class="token operator">=</span> <span class="token number">20971520</span> <span class="token punctuation">(</span><span class="token number">20</span>.0MB<span class="token punctuation">)</span>
   used     <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0</span>.0MB<span class="token punctuation">)</span>
   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">20971520</span> <span class="token punctuation">(</span><span class="token number">20</span>.0MB<span class="token punctuation">)</span>
   <span class="token number">0.0</span>% used
To Space:
   capacity <span class="token operator">=</span> <span class="token number">20971520</span> <span class="token punctuation">(</span><span class="token number">20</span>.0MB<span class="token punctuation">)</span>
   used     <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0</span>.0MB<span class="token punctuation">)</span>
   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">20971520</span> <span class="token punctuation">(</span><span class="token number">20</span>.0MB<span class="token punctuation">)</span>
   <span class="token number">0.0</span>% used
PS Old Generation
   capacity <span class="token operator">=</span> <span class="token number">104857600</span> <span class="token punctuation">(</span><span class="token number">100</span>.0MB<span class="token punctuation">)</span>
   used     <span class="token operator">=</span> <span class="token number">64028920</span> <span class="token punctuation">(</span><span class="token number">61</span>.06273651123047MB<span class="token punctuation">)</span>
   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">40828680</span> <span class="token punctuation">(</span><span class="token number">38</span>.93726348876953MB<span class="token punctuation">)</span>
   <span class="token number">61.06273651123047</span>% used
PS Perm Generation
   capacity <span class="token operator">=</span> <span class="token number">104857600</span> <span class="token punctuation">(</span><span class="token number">100</span>.0MB<span class="token punctuation">)</span>
   used     <span class="token operator">=</span> <span class="token number">6504792</span> <span class="token punctuation">(</span><span class="token number">6</span>.203453063964844MB<span class="token punctuation">)</span>
   <span class="token function">free</span>     <span class="token operator">=</span> <span class="token number">98352808</span> <span class="token punctuation">(</span><span class="token number">93</span>.79654693603516MB<span class="token punctuation">)</span>
   <span class="token number">6.203453063964844</span>% used

<span class="token number">3795</span> interned Strings occupying <span class="token number">301744</span> bytes.  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说如果想知道当前jvm使用的堆内内存，只需要简单的把Heap Usage模块的相关信息累加即可，都可以不关心各个区域的配置信息。</p><p>当然也可以通过jstat -gc pid 500ms 1000来实时查看堆中各个区域的使用情况。这个方式和上面那中方法结果是一致的。</p><ol start="5"><li>查看jvm实例堆外内存的使用情况 很可惜我还没找到相关的工具可以直接查看这个信息的，但可以通过上面几个信息来得到堆外内存的使用情况。大致算法就是：堆内内存占用+堆外内存占用=总的jvm内存占用。 总的jvm内存占用：通过上面的1或2可以知道 堆内内存占用：jmap -heap pid 就可以计算出堆外内存占用情况。</li></ol><p>2022/9/7补充： 应该可以开启 -XX:NativeMemoryTracking=detail 参数，然后通过 jcmd pid VM.native_memory detail | less 来查看</p>`,6),k={start:"6"},m={href:"http://blog.csdn.net/wilsonpeng3/article/details/52576253",target:"_blank",rel:"noopener noreferrer"},v=o(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>btrace<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>btrace<span class="token punctuation">.</span></span><span class="token class-name">BTraceUtils</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@BTrace</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloBtrace</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@OnMethod</span><span class="token punctuation">(</span>
    clazz<span class="token operator">=</span><span class="token string">&quot;java.nio.ByteBuffer&quot;</span><span class="token punctuation">,</span>
    method<span class="token operator">=</span><span class="token string">&quot;allocateDirect&quot;</span>
  <span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">onF1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">jstack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello BTrace&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>                  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="系统推荐" tabindex="-1"><a class="header-anchor" href="#系统推荐" aria-hidden="true">#</a> 系统推荐</h2>`,3),b=n("p",null,[n("br"),n("br"),n("br"),n("br"),n("br"),n("br")],-1),B=n("hr",null,null,-1),E=n("hr",null,null,-1),h=n("ul",null,[n("li",null,[n("strong",null,"随机毒鸡汤"),s("：不明白你们遇到好事，为什么要掐腿揉眼睛，真醒了怎么办？ "),n("br"),n("br"),n("img",{src:"https://images.pexels.com/photos/5745998/pexels-photo-5745998.jpeg?auto=compress&cs=tinysrgb&h=650&w=940",alt:"From below of illuminated sign with bright Chinese hieroglyphs hanging outside building at night",loading:"lazy"})])],-1);function f(A,_){const l=p("ExternalLinkIcon"),e=p("RouterLink");return i(),u("div",null,[d,n("ol",k,[n("li",null,[s("堆外内存使用异常 如果发现堆外内存使用异常，先检查是否开启了-XX:+DisableExplicitGC.(开启这个会影响到jvm对堆外内存的回收，所以在频繁使用了堆外内存的情况下，建议不要开启这个选项)。 如果没有开启，那一般就是程序光申请了却没有显式的释放。这个是否如果不清楚程序哪里使用了堆外内存，可以通过btrace脚本进行跟踪来获取调用堆栈，定位代码。 jdk提供用于堆外内存分配的api最底层的应该是Unsafe#allocateMemory方法，但这个方法是native，btrace对native方法的跟踪好像有点问题。所以可以试试拦截上一层的方法， 比如：java.nio.ByteBuffer#allocateDirect方法，示例如下: 至于如何使用btrace，入门可以参考："),n("a",m,[s("http://blog.csdn.net/wilsonpeng3/article/details/52576253"),a(l)]),s(" 关于btrace的另外一些问题，就不再是本话题的讨论内容了。")])]),v,n("ul",null,[n("li",null,[a(e,{to:"/other/%E5%9C%A8%E6%B2%A1%E6%9C%89%20telnet%20%E5%92%8C%20nc%20%E7%9A%84%E4%B8%96%E7%95%8C%E9%87%8C%EF%BC%8C%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E5%88%A4%E6%96%AD%E7%AB%AF%E5%8F%A3%E6%98%AF%E5%90%A6%E9%80%9A%EF%BC%9F.html"},{default:t(()=>[s("在没有 telnet 和 nc 的世界里，如何优雅地判断端口是否通？")]),_:1})]),n("li",null,[a(e,{to:"/software/java-basic/synchronized%E5%8E%9F%E7%90%86%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90.html"},{default:t(()=>[s("synchronized原理深度剖析")]),_:1})]),n("li",null,[a(e,{to:"/other/Git%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AA%E6%8F%90%E4%BA%A4%E5%B9%B6push%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.html"},{default:t(()=>[s("Git合并多个提交并push到远程仓库")]),_:1})]),n("li",null,[a(e,{to:"/other/MySQL%E9%AB%98%E5%8F%AF%E7%94%A8.html"},{default:t(()=>[s("MySQL高可用")]),_:1})]),n("li",null,[a(e,{to:"/software/jvm/JDK%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7.html"},{default:t(()=>[s("JDK命令行工具")]),_:1})]),n("li",null,[a(e,{to:"/software/middleware/mysql/%E5%BC%82%E5%9C%B0%E5%A4%9A%E6%B4%BB.html"},{default:t(()=>[s("异地多活")]),_:1})]),n("li",null,[a(e,{to:"/software/middleware/mysql/MySQL%E7%B4%A2%E5%BC%95.html"},{default:t(()=>[s("MySQL索引")]),_:1})]),n("li",null,[a(e,{to:"/software/java-basic/%E4%B8%8D%E9%87%8D%E5%90%AF%20JVM%EF%BC%8C%E5%A6%82%E4%BD%95%E6%9B%BF%E6%8D%A2%E6%8E%89%E5%B7%B2%E7%BB%8F%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%B1%BB%EF%BC%9F.html"},{default:t(()=>[s("不重启 JVM，如何替换掉已经加载的类？")]),_:1})]),n("li",null,[a(e,{to:"/other/CentOS7%E4%B8%8BDocker%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84%E5%90%8E%E9%98%B2%E7%81%AB%E5%A2%99%E5%A4%B1%E6%95%88.html"},{default:t(()=>[s("CentOS7下Docker端口映射后防火墙失效")]),_:1})]),n("li",null,[a(e,{to:"/software/docker/Docker%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1%E6%96%B9%E6%A1%88.html"},{default:t(()=>[s("Docker跨主机通信方案")]),_:1})]),n("li",null,[a(e,{to:"/software/unclassified/BBR%E5%8A%A0%E9%80%9F.html"},{default:t(()=>[s("BBR加速")]),_:1})]),n("li",null,[a(e,{to:"/other/WebSocket%20SpringBoot%20Demo.html"},{default:t(()=>[s("WebSocket SpringBoot Demo")]),_:1})])]),b,B,E,h])}const M=c(r,[["render",f],["__file","JVM异常处理.html.vue"]]);export{M as default};
