import{_ as l,$ as p,a0 as i,a1 as n,a2 as s,a3 as a,a4 as r,a5 as c,w as t}from"./framework-6821ba0c.js";const m={},d=n("h2",{id:"gperftools作用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gperftools作用","aria-hidden":"true"},"#"),s(" gperftools作用")],-1),u={href:"https://gperftools.github.io/gperftools/heapprofile.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://gperftools.github.io/gperftools/heap_checker.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://gperftools.github.io/gperftools/cpuprofile.html",target:"_blank",rel:"noopener noreferrer"},h=c(`<p>本文主要讲heapprofile的使用</p><h2 id="gperftools安装" tabindex="-1"><a class="header-anchor" href="#gperftools安装" aria-hidden="true">#</a> gperftools安装</h2><h3 id="安装libunwind" tabindex="-1"><a class="header-anchor" href="#安装libunwind" aria-hidden="true">#</a> 安装libunwind</h3><p>yum install libunwind-devel.x86_64</p><p>我是直接使用上面的命令安装的，网上有些用得源码编译安装 我用源码安装好，设置 export LD_PRELOAD=/usr/local/lib/libtcmalloc.so 环境变量后，执行ls都报错，所以没采用源码安装，具体原因没深究</p><h3 id="安装gperftools" tabindex="-1"><a class="header-anchor" href="#安装gperftools" aria-hidden="true">#</a> 安装gperftools</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 下载源码，获取最新版下载地址： https://github.com/gperftools/gperftools/releases </span>
<span class="token function">wget</span> https://github.com/gperftools/gperftools/releases/download/gperftools-2.10/gperftools-2.10.tar.gz

<span class="token comment"># 解压 </span>
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> gperftools-2.10.tar.gz

<span class="token comment"># 进入解压后的目录，大概这些文件： </span>
➜  gperftools-2.10 ll
总用量 <span class="token number">3</span>.2M
-rw-r--r--  <span class="token number">1</span> root root  44K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:22 aclocal.m4
-rw-r--r--  <span class="token number">1</span> root root   <span class="token number">35</span> <span class="token number">2</span>月  <span class="token number">15</span> <span class="token number">2021</span> AUTHORS
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4</span>.0K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:39 benchmark
-rw-r--r--  <span class="token number">1</span> root root 442K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:39 ChangeLog
-rw-r--r--  <span class="token number">1</span> root root  34K <span class="token number">2</span>月  <span class="token number">15</span> <span class="token number">2021</span> ChangeLog.old
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4</span>.0K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">11</span>:31 cmake
-rw-r--r--  <span class="token number">1</span> root root  62K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:16 CMakeLists.txt
-rwxr-xr-x  <span class="token number">1</span> root root <span class="token number">7</span>.3K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:22 compile
-rwxr-xr-x  <span class="token number">1</span> root root  49K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:22 config.guess
-rwxr-xr-x  <span class="token number">1</span> root root  35K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:22 config.sub
-rwxr-xr-x  <span class="token number">1</span> root root 719K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:22 configure
-rw-r--r--  <span class="token number">1</span> root root  29K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:16 configure.ac
-rw-r--r--  <span class="token number">1</span> root root <span class="token number">1</span>.5K <span class="token number">8</span>月  <span class="token number">11</span> <span class="token number">2014</span> COPYING
-rwxr-xr-x  <span class="token number">1</span> root root  24K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:22 depcomp
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4</span>.0K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:39 docs
-rw-r--r--  <span class="token number">1</span> root root  26K <span class="token number">2</span>月  <span class="token number">15</span> <span class="token number">2021</span> gperftools.sln
-rw-r--r--  <span class="token number">1</span> root root  24K <span class="token number">2</span>月  <span class="token number">15</span> <span class="token number">2021</span> INSTALL
-rwxr-xr-x  <span class="token number">1</span> root root  15K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:22 install-sh
-rwxr-xr-x  <span class="token number">1</span> root root 347K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:22 libtool
-rwxr-xr-x  <span class="token number">1</span> root root 326K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:22 ltmain.sh
drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4</span>.0K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:39 m4
-rw-r--r--  <span class="token number">1</span> root root  69K <span class="token number">1</span>月  <span class="token number">15</span> <span class="token number">2022</span> Makefile.am
-rw-r--r--  <span class="token number">1</span> root root 684K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:22 Makefile.in
-rwxr-xr-x  <span class="token number">1</span> root root <span class="token number">6</span>.8K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:22 missing
-rw-r--r--  <span class="token number">1</span> root root  44K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:16 NEWS
drwxr-xr-x  <span class="token number">4</span> root root <span class="token number">4</span>.0K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:39 packages
-rwxr-xr-x  <span class="token number">1</span> root root 175K <span class="token number">2</span>月  <span class="token number">15</span> <span class="token number">2021</span> pprof-symbolize
-rw-r--r--  <span class="token number">1</span> root root  11K <span class="token number">12</span>月 <span class="token number">13</span> <span class="token number">2021</span> README
-rw-r--r--  <span class="token number">1</span> root root <span class="token number">5</span>.6K <span class="token number">2</span>月  <span class="token number">15</span> <span class="token number">2021</span> README_windows.txt
drwxr-xr-x  <span class="token number">8</span> root root <span class="token number">4</span>.0K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:39 src
-rwxr-xr-x  <span class="token number">1</span> root root <span class="token number">4</span>.8K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:22 test-driver
-rw-r--r--  <span class="token number">1</span> root root <span class="token number">1</span>.7K <span class="token number">11</span>月 <span class="token number">28</span> <span class="token number">2017</span> TODO
drwxr-xr-x <span class="token number">23</span> root root <span class="token number">4</span>.0K <span class="token number">5</span>月  <span class="token number">31</span> <span class="token number">12</span>:39 vsprojects

<span class="token comment">## 编译安装</span>
./configure

<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设置环境变量" tabindex="-1"><a class="header-anchor" href="#设置环境变量" aria-hidden="true">#</a> 设置环境变量</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 不建议写到配置文件中，那样的话对所有新起的进程都会起作用</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_PRELOAD</span><span class="token operator">=</span>/usr/local/lib/libtcmalloc.so

<span class="token comment"># 如果不设置，不会进行heapdump，取消设置: unset HEAPPROFILE</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">HEAPPROFILE</span><span class="token operator">=</span>/pqs/heap/hprof

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一些可选变量，如图：<br><img src="https://cdn.justdopay.com/pasteimageintomarkdown/2022-08-29/282500169706700.png" alt="" loading="lazy"></p><p>从上图可以看出每当进程使用的内存增加了100m，就会触发heapdump</p><h2 id="运行程序" tabindex="-1"><a class="header-anchor" href="#运行程序" aria-hidden="true">#</a> 运行程序</h2><p>这里我这里大概实验了下对直接内存的分析，带代码中增加了下下面两个http方法： <img src="https://cdn.justdopay.com/pasteimageintomarkdown/2022-08-29/282776880127000.png" alt="" loading="lazy"></p><p>正常运行程序或脚本即可 我这里运行的是： nohup java -XX:NativeMemoryTracking=detail -jar xxxx.jar &gt; log.txt 2&gt;&amp;1 &amp;</p><p>之前是怎么运行的，现在仍怎么运行，上面命令行中 -XX:NativeMemoryTracking=detail 和本次实验无关，可有可无</p><p>在日志中会有大概如下的输出： <img src="https://cdn.justdopay.com/pasteimageintomarkdown/2022-08-29/283092547279500.png" alt="" loading="lazy"></p><p>执行新增的bf http方法 /bf?direct=true&amp;capacity=120000000&amp;str=bbb 后： <img src="https://cdn.justdopay.com/pasteimageintomarkdown/2022-08-29/283271424421900.png" alt="" loading="lazy"></p><p>因为我参数中每次分配的内存在100多M,触发了gperftools的heapdump条件，所以每执行一次就会输出一个heapdump日志</p><h2 id="分析heapdump文件" tabindex="-1"><a class="header-anchor" href="#分析heapdump文件" aria-hidden="true">#</a> 分析heapdump文件</h2><p>此时生成了多个heapdump文件： <img src="https://cdn.justdopay.com/pasteimageintomarkdown/2022-08-29/283496096964900.png" alt="" loading="lazy"></p><h3 id="text分析" tabindex="-1"><a class="header-anchor" href="#text分析" aria-hidden="true">#</a> text分析</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>这里分析的是05.heap，那么得到的结果就是从05.heap这个文件产生时候进程分配的内存情况，如果想分析04.heap到05.heap期间进程内存分配的变化情况，在后面有介绍
pprof <span class="token variable">$JAVA_HOME</span>/bin/java <span class="token parameter variable">--text</span> ./test_27837.0005.heap <span class="token operator">&gt;</span> ./memTrack.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.justdopay.com/pasteimageintomarkdown/2022-08-29/283798165077900.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>每列的含义： <img src="https://cdn.justdopay.com/pasteimageintomarkdown/2022-08-29/285287799823300.png" alt="" loading="lazy"><img src="https://cdn.justdopay.com/pasteimageintomarkdown/2022-08-29/285333837204800.png" alt="" loading="lazy"></p><p>比较长，可自行实验</p><h3 id="pdf分析-个人建议的方式" tabindex="-1"><a class="header-anchor" href="#pdf分析-个人建议的方式" aria-hidden="true">#</a> pdf分析（个人建议的方式）</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> pprof <span class="token variable">$JAVA_HOME</span>/bin/java <span class="token parameter variable">--pdf</span> ./test_27837.0005.heap <span class="token operator">&gt;</span> ./memTrack.pdf 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>pdf截图： <img src="https://cdn.justdopay.com/pasteimageintomarkdown/2022-08-29/284159436692400.jpg" alt="" loading="lazy"> 大的内存分配会用粗线表示</p><p>怎么看这个图： <img src="https://cdn.justdopay.com/pasteimageintomarkdown/2022-08-29/285581324066800.png" alt="" loading="lazy"></p><p>可以看到有个Unsafe_allocateMemory的分配占用很多，于是可以看代码里哪些地方调用了</p><h3 id="两个heapdump文件比对" tabindex="-1"><a class="header-anchor" href="#两个heapdump文件比对" aria-hidden="true">#</a> 两个heapdump文件比对</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> pprof <span class="token parameter variable">--base</span><span class="token operator">=</span>./test_27837.0004.heap <span class="token variable">$JAVA_HOME</span>/bin/java <span class="token parameter variable">--pdf</span> ./test_27837.0005.heap <span class="token operator">&gt;</span> ./memTrack.pdf 
 
 意思就是分析 test_27837.0004.heap 到 test_27837.0005.heap 这段时间，进程内存的变化情况情况
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分析mmap和munmap" tabindex="-1"><a class="header-anchor" href="#分析mmap和munmap" aria-hidden="true">#</a> 分析mmap和munmap</h3><p>export HEAP_PROFILE_MMAP_LOG=true</p><p>得到下面的结果（程序的日志）： <img src="https://cdn.justdopay.com/pasteimageintomarkdown/2022-08-29/287224625475700.png" alt="" loading="lazy"></p>`,35),v={href:"https://www.cnblogs.com/dream397/p/14629276.html",target:"_blank",rel:"noopener noreferrer"},g=n("img",{src:"https://cdn.justdopay.com/pasteimageintomarkdown/2022-08-30/362324696740200.png",alt:"",loading:"lazy"},null,-1),f=n("p",null,"sbrk底层是采用的是brk实现，sbrk不是一种系统调用，brk是系统调用（通过man syscalls 查看）",-1),E=n("h2",{id:"文末",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#文末","aria-hidden":"true"},"#"),s(" 文末")],-1),x=n("p",null,"我对这个攻击研究还不是很深，所以目前只能比较浅显的使用",-1),_=n("br",null,null,-1),A=n("h2",{id:"系统推荐",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#系统推荐","aria-hidden":"true"},"#"),s(" 系统推荐")],-1),w=n("p",null,[n("br"),n("br"),n("br"),n("br"),n("br"),n("br")],-1),B=n("hr",null,null,-1),y=n("hr",null,null,-1),K=n("ul",null,[n("li",null,[n("strong",null,"随机毒鸡汤"),s("：时间不会解决任何问题，只会解决我们。 "),n("br"),n("br"),n("img",{src:"https://tuapi.eees.cc/api.php?category=biying&type=302&uuid=9b6b5f3d-2465-4072-88ac-3ded73b9ff8d",alt:"",loading:"lazy"})])],-1);function M(j,C){const o=t("ExternalLinkIcon"),e=t("RouterLink");return p(),i("div",null,[d,n("ol",null,[n("li",null,[s("heapprofile: "),n("a",u,[s("https://gperftools.github.io/gperftools/heapprofile.html"),a(o)])]),n("li",null,[s("heap_checker: "),n("a",b,[s("https://gperftools.github.io/gperftools/heap_checker.html"),a(o)])]),n("li",null,[s("cpuprofile: "),n("a",k,[s("https://gperftools.github.io/gperftools/cpuprofile.html"),a(o)])])]),h,n("p",null,[s("可以看到120m的堆外内存是通过sbrk分配的，sbrk/brk是通过修改data segment的_edata指针来完成分配和回收的。 扩展阅读： "),n("a",v,[s("https://www.cnblogs.com/dream397/p/14629276.html"),a(o)]),s(" mmap分配的是：堆和栈直接的内存，从上面的扩展阅读可以知道 mmap分配的地址应该比sbrk、brk分配的地址高（上图也验证了这个结果） "),g]),f,E,x,_,A,n("ul",null,[n("li",null,[a(e,{to:"/software/unclassified/KVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85.html"},{default:r(()=>[s("KVM 虚拟机安装")]),_:1})]),n("li",null,[a(e,{to:"/software/jvm/JVM%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE.html"},{default:r(()=>[s("JVM参数设置")]),_:1})]),n("li",null,[a(e,{to:"/software/unclassified/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E7%AC%94%E8%AE%B0.html"},{default:r(()=>[s("乱七八糟的笔记")]),_:1})]),n("li",null,[a(e,{to:"/other/%E9%AB%98%E5%8F%AF%E7%94%A8%E9%80%9A%E7%94%A8%E6%96%B9%E6%A1%88.html"},{default:r(()=>[s("高可用通用方案")]),_:1})]),n("li",null,[a(e,{to:"/software/maccms/MAC%20CMS.html"},{default:r(()=>[s("MAC CMS")]),_:1})]),n("li",null,[a(e,{to:"/software/unclassified/index%E6%96%B9%E6%B3%95%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95.html"},{default:r(()=>[s("index方法压力测试记录")]),_:1})]),n("li",null,[a(e,{to:"/software/middleware/mysql/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.html"},{default:r(()=>[s("分库分表")]),_:1})]),n("li",null,[a(e,{to:"/other/%E6%8E%A8%E8%8D%90%E5%87%A0%E4%B8%AA%E9%80%82%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7.html"},{default:r(()=>[s("推荐几个适用小工具")]),_:1})]),n("li",null,[a(e,{to:"/software/unclassified/%E5%A4%9A%E5%8F%B0centos%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%96%87%E4%BB%B6%E4%BA%92%E7%9B%B8%E5%A4%87%E4%BB%BD.html"},{default:r(()=>[s("多台centos服务器，文件互相备份")]),_:1})]),n("li",null,[a(e,{to:"/software/jvm/JVM%E6%9D%82%E9%A1%B9.html"},{default:r(()=>[s("JVM杂项")]),_:1})]),n("li",null,[a(e,{to:"/software/unclassified/%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2%E6%96%87%E4%BB%B6%E5%90%8D%E4%B8%AD%E7%9A%84%E6%8C%87%E5%AE%9A%E5%AD%97%E7%AC%A6%E4%B8%B2.html"},{default:r(()=>[s("批量替换文件名中的指定字符串")]),_:1})]),n("li",null,[a(e,{to:"/other/SpringBoot%E6%9C%8D%E5%8A%A1%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%AE%8C%E6%88%90%E5%89%8D%E8%A2%AB%E6%8F%90%E5%89%8D%E6%B3%A8%E5%86%8C%E5%88%B0nacos.html"},{default:r(()=>[s("SpringBoot服务在服务启动完成前被提前注册到nacos")]),_:1})])]),w,B,y,K])}const z=l(m,[["render",M],["__file","gperftools.html.vue"]]);export{z as default};
