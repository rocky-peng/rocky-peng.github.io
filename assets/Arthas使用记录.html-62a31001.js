import{_ as r,$ as c,a0 as d,a1 as a,a2 as n,a3 as e,a4 as t,a5 as o,w as i}from"./framework-827a3556.js";const p={},u=o(`<p>思考如下问题：</p><ol><li>现在有个接口在开发环境非常快，但线上环境就是慢（假设已经知道了就是代码问题，如何定位具体问题）</li><li>我明明改了代码了，为啥子测试环境感觉没生效？ 运维又说更新了代码了，怎么如何确认</li><li>排查问题的时候，想知道某个方法的入参、出参，但是代码里又买有打印相关日志，怎么搞？</li><li>让运维修改了某个配置的值，但运维部署后，始终感觉有问题，感觉没有更改一样，又没有相关日志，怎么确认？</li></ol><h2 id="vmtool" tabindex="-1"><a class="header-anchor" href="#vmtool" aria-hidden="true">#</a> vmtool</h2><p>这个命令可以获取指定类的实例对象，拿到实例对象后还能执行实例方法等。通过help查看使用方法</p><figure><img src="https://cdn.justdopay.com/notion/md5-4112d9049c217b8cd9ee1dc3457a7f4d.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><p>通过这个命令可以拿到指定类的实例，并执行实例的方法，查看字段值等。</p><h3 id="调用方法时创建对象" tabindex="-1"><a class="header-anchor" href="#调用方法时创建对象" aria-hidden="true">#</a> 调用方法时创建对象</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>private Object getXXX(Long p1<span class="token punctuation">,</span>List p2<span class="token punctuation">,</span>Set p3);

可以像下面这样创建对象并调用
vmtool --action getInstances --className com.xxx.XXX --express &#39;instances<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.getXXX(1L<span class="token punctuation">,</span>(#test1=new java.util.ArrayList()<span class="token punctuation">,</span>#test1.add(<span class="token string">&quot;test&quot;</span>)<span class="token punctuation">,</span>#test1)<span class="token punctuation">,</span>(#test=new java.util.HashSet()<span class="token punctuation">,</span>#test.add(<span class="token string">&quot;&quot;</span>)<span class="token punctuation">,</span>#test))&#39;

如果执行vmtool提示类不存在，然后sc却能搜索到类，那么可以加上-c参数来指定类加载器。类加载器可以通过sc -d 类名来获得，例如：

vmtool --action getInstances -c 21b8d17c --className com.xxxxx.XXXXServiceClientImpl --express &#39;instances<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.getCustomerList((#test1=new com.xxxxx.XXXXCustomerListReq()<span class="token punctuation">,</span>#test1.setCreatedAtStart(<span class="token number">1717224477</span>)<span class="token punctuation">,</span>#test1.setCreatedAtEnd(<span class="token number">1719816477</span>)<span class="token punctuation">,</span>#test1.setPageNo(<span class="token number">1</span>)<span class="token punctuation">,</span>#test1.setPageSize(<span class="token number">100</span>)<span class="token punctuation">,</span>#test1)<span class="token punctuation">,</span><span class="token string">&quot;123456&quot;</span>)&#39;

vmtool 条件过滤
trace com.xxxx.XXXXServiceImpl getXXXXConfig  -n <span class="token number">5</span> --skipJDKMethod <span class="token boolean">false</span> &#39;<span class="token string">&quot;20111984&quot;</span>.equalsIgnoreCase(params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>)&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ognl" tabindex="-1"><a class="header-anchor" href="#ognl" aria-hidden="true">#</a> ognl</h2><h3 id="获取静态属性值" tabindex="-1"><a class="header-anchor" href="#获取静态属性值" aria-hidden="true">#</a> 获取静态属性值</h3><ul><li>格式： ognl -x 2 ‘@类名@静态属性名’</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>ognl <span class="token operator">-</span>x <span class="token number">1</span> <span class="token string">&#39;@com.xxxx.SpringUtils@applicationContext&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>很有可能出现下面的错误</p><figure><img src="https://cdn.justdopay.com/notion/md5-23d32f676a1fea41242ba0cdf36621a9.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><p>就是提示找不到这个类。这个时候需要先找到加载这个类的classloader（sc -d 类名）</p><p>再执行下面的命令：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>ognl <span class="token operator">-</span>x <span class="token number">1</span> <span class="token operator">-</span>c <span class="token string">&#39;@com.xxxx.SpringUtils@applicationContext&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.justdopay.com/notion/md5-b204ab9cd53ca1bc1265e4d2af50900f.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="获取普通属性值" tabindex="-1"><a class="header-anchor" href="#获取普通属性值" aria-hidden="true">#</a> 获取普通属性值</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>ognl <span class="token operator">-</span>x <span class="token number">3</span> <span class="token string">&#39;#springContext=@com.xxxxx.SpringUtils@applicationContext,#springContext.getBean(&quot;xxxxServiceImpl&quot;).schema&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="调用静态方法" tabindex="-1"><a class="header-anchor" href="#调用静态方法" aria-hidden="true">#</a> 调用静态方法</h3><p>和静态属性很相似</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>ognl <span class="token operator">-</span>x <span class="token number">3</span> <span class="token string">&#39;@com.xxxx.SpringUtils@getBean(&quot;xxxxServiceImpl&quot;)&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="调用实例方法" tabindex="-1"><a class="header-anchor" href="#调用实例方法" aria-hidden="true">#</a> 调用实例方法</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>ognl <span class="token operator">-</span>x <span class="token number">3</span> <span class="token string">&#39;#springContext=@com.xxxx.SpringUtils@applicationContext,#springContext.getBean(&quot;xxxxServiceImpl&quot;)&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ognl扩展阅读" tabindex="-1"><a class="header-anchor" href="#ognl扩展阅读" aria-hidden="true">#</a> ognl扩展阅读</h3>`,26),h={href:"https://commons.apache.org/proper/commons-ognl/language-guide.html",target:"_blank",rel:"noopener noreferrer"},m=o(`<h2 id="watch" tabindex="-1"><a class="header-anchor" href="#watch" aria-hidden="true">#</a> Watch</h2><ul><li>方法调用层级比较多，有问题需要排查，但又没有日志，需要查看某个中间结果的。比如想看calcCrons这个方法的返回是是什么</li></ul><figure><img src="https://cdn.justdopay.com/notion/md5-256041297aa45aa490eb6b0db3b27917.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><ul><li>比如某个方法执行异常了，但是日志中没有打印堆栈信息，这个时候就能快速定位异常位置</li></ul><h2 id="trace" tabindex="-1"><a class="header-anchor" href="#trace" aria-hidden="true">#</a> Trace</h2><p>主要是查看某个方法内部各个节点的耗时情况</p><h3 id="案例一" tabindex="-1"><a class="header-anchor" href="#案例一" aria-hidden="true">#</a> 案例一</h3><p>之前前端同事说下面的接口比较慢</p><p><code>/xxxx/xxxx/xxxx/xxxx/list</code></p><figure><img src="https://cdn.justdopay.com/notion/md5-275c78fc16854272237bb5132af5bb47.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="案例二" tabindex="-1"><a class="header-anchor" href="#案例二" aria-hidden="true">#</a> 案例二</h3><p>之前遇到过<code>SecureRandom.getInstanceStrong()</code> 的next这个方法在windows和docker环境中都能正常响应，但在centos（没有采用docker）中就很慢，甚至超时。</p><p>百度搜索：SecureRandom.getInstanceStrong() 就知道具体原因</p><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><h3 id="一键离线安装" tabindex="-1"><a class="header-anchor" href="#一键离线安装" aria-hidden="true">#</a> 一键离线安装</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>mkdir -p /tmp/arthas
wget https<span class="token operator">:</span><span class="token comment">//arthas.aliyun.com/download/latest_version?mirror=aliyun -O /tmp/arthas/arthas.zip</span>
unzip /tmp/arthas/arthas.zip -d /tmp/arthas/
java -jar /tmp/arthas/arthas-boot.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看启用端口" tabindex="-1"><a class="header-anchor" href="#查看启用端口" aria-hidden="true">#</a> 查看启用端口</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>vmtool --action getInstances --className org.springframework.context.ConfigurableApplicationContext --express &#39;instances<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.getEnvironment().getProperty(<span class="token string">&quot;server.port&quot;</span>)&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看数据库连接" tabindex="-1"><a class="header-anchor" href="#查看数据库连接" aria-hidden="true">#</a> 查看数据库连接</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>vmtool --action getInstances --className com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper --express &#39;instances<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.basicProperties&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看contextpath" tabindex="-1"><a class="header-anchor" href="#查看contextpath" aria-hidden="true">#</a> 查看contextPath</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>vmtool --action getInstances --className org.springframework.context.ConfigurableApplicationContext --express &#39;instances<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.getEnvironment().getProperty(<span class="token string">&quot;server.context-path&quot;</span>)&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="系统推荐" tabindex="-1"><a class="header-anchor" href="#系统推荐" aria-hidden="true">#</a> 系统推荐</h2>`,24),g=a("p",null,[a("br"),a("br"),a("br"),a("br"),a("br"),a("br")],-1),x=a("hr",null,null,-1),b=a("hr",null,null,-1),v=a("ul",null,[a("li",null,[a("strong",null,"随机毒鸡汤"),n("：为什么要晒这么黑？因为我不想白活一生。 "),a("br"),a("br"),a("img",{src:"https://tuapi.eees.cc/api.php?category=biying&type=302&uuid=284fff2b-e8f0-4a22-9876-86fee73ee398",alt:"",loading:"lazy"})])],-1);function f(k,E){const l=i("ExternalLinkIcon"),s=i("RouterLink");return c(),d("div",null,[u,a("p",null,[a("a",h,[n("https://commons.apache.org/proper/commons-ognl/language-guide.html"),e(l)])]),m,a("ul",null,[a("li",null,[e(s,{to:"/software/unclassified/RSA%20%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88.html"},{default:t(()=>[n("RSA 加密解密多语言实现方案")]),_:1})]),a("li",null,[e(s,{to:"/software/docker/Docker%E8%BF%9B%E8%A1%8C%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB.html"},{default:t(()=>[n("Docker进行资源隔离")]),_:1})]),a("li",null,[e(s,{to:"/other/%E6%9D%A5%E4%B8%AAJVM%E5%86%B7%E7%9F%A5%E8%AF%86.html"},{default:t(()=>[n("来个JVM冷知识")]),_:1})]),a("li",null,[e(s,{to:"/other/MySQL%E9%AB%98%E5%8F%AF%E7%94%A8.html"},{default:t(()=>[n("MySQL高可用")]),_:1})]),a("li",null,[e(s,{to:"/other/K8S%20%E6%97%A0%E6%84%9F%E5%8F%91%E5%B8%83.html"},{default:t(()=>[n("K8S 无感发布")]),_:1})]),a("li",null,[e(s,{to:"/software/middleware/mq/kafka.html"},{default:t(()=>[n("kafka")]),_:1})]),a("li",null,[e(s,{to:"/other/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E6%8B%BC%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%90%97%EF%BC%9F.html"},{default:t(()=>[n("你真的会拼接字符串吗？")]),_:1})]),a("li",null,[e(s,{to:"/software/middleware/mysql/MySQL%E7%B4%A2%E5%BC%95.html"},{default:t(()=>[n("MySQL索引")]),_:1})]),a("li",null,[e(s,{to:"/software/middleware/mysql/MySQL%E4%B8%89%E5%A4%A7%E6%97%A5%E5%BF%97.html"},{default:t(()=>[n("MySQL三大日志")]),_:1})]),a("li",null,[e(s,{to:"/software/java-basic/ReentrantLock%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB.html"},{default:t(()=>[n("ReentrantLock源码解读")]),_:1})]),a("li",null,[e(s,{to:"/software/unclassified/%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2%E6%96%87%E4%BB%B6%E5%90%8D%E4%B8%AD%E7%9A%84%E6%8C%87%E5%AE%9A%E5%AD%97%E7%AC%A6%E4%B8%B2.html"},{default:t(()=>[n("批量替换文件名中的指定字符串")]),_:1})]),a("li",null,[e(s,{to:"/software/unclassified/%E5%88%86%E5%B8%83%E5%BC%8F%E9%97%AE%E9%A2%98.html"},{default:t(()=>[n("分布式问题")]),_:1})])]),g,x,b,v])}const _=r(p,[["render",f],["__file","Arthas使用记录.html.vue"]]);export{_ as default};
