import{_ as s,$ as p,a0 as d,a1 as e,a2 as l,a3 as i,a4 as n,a5 as a,w as r}from"./framework-326c7dc0.js";const c={},h=a('<h2 id="innodb索引" tabindex="-1"><a class="header-anchor" href="#innodb索引" aria-hidden="true">#</a> InnoDB索引</h2><p>InnoDB支持的索引</p><ul><li><p>分类方式1：</p><ol><li><p>B+树索引</p><ul><li>B 不是指binary，而是balance。</li><li>由平衡二叉树演变而来，是目前关系型数据库中查找最为常用和有效的索引</li><li>InnoDB中，通过某个键值找到value不是具体的数据行，而是数据行所在的页，然后读取页到内存，再在内存中进行查找，最终找到要查找的数据。</li></ul></li><li><p>全文索引</p></li><li><p>哈希索引 InnoDB支持的哈希索引是自适应的，InnoDB存储引擎会根据表的使用情况自动为表生成哈希索引，不能人为干预是否在一张表中生成哈希索引。</p></li></ol></li><li><p>分类方式2：</p><ol><li><p>聚集索引</p></li><li><p>辅助索引</p></li></ol></li><li><p>分类方式3：</p><ol><li><p>主键索引</p></li><li><p>唯一索引</p></li><li><p>覆盖索引</p></li><li><p>联合索引 == 复合索引</p></li></ol></li></ul><h3 id="b-树索引" tabindex="-1"><a class="header-anchor" href="#b-树索引" aria-hidden="true">#</a> B+树索引</h3><p>前面提到过，页是MySQL进行IO操作的最小单位(表段区页，每页16kb，每次申请4-5个区，每个区1m)</p><p>页的存储结构如下： <img src="https://cdn.justdopay.com/xiaoshujiang/1629079649483.png" alt="页结构示意图" loading="lazy"></p><figure><img src="https://cdn.justdopay.com/xiaoshujiang/1629079639650.png" alt="enter description here" tabindex="0" loading="lazy"><figcaption>enter description here</figcaption></figure><figure><img src="https://cdn.justdopay.com/xiaoshujiang/1629079658873.png" alt="enter description here" tabindex="0" loading="lazy"><figcaption>enter description here</figcaption></figure><ul><li><p><strong>各个数据页</strong>组成一个<strong>双向链表</strong></p></li><li><p>每个<strong>数据页中的记录</strong>又可以组成一个<strong>单向链表</strong></p></li><li><p>每个数据页都会为存储在它里边儿的记录生成一个<strong>页目录</strong>，在通过主键查找某条记录的时候可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录</p></li><li><p>以<strong>非索引列</strong>作为搜索条件：依次遍历单链表中的每条记录</p></li></ul>',9),u={id:"b树和b-树的区别",tabindex:"-1"},b=e("a",{class:"header-anchor",href:"#b树和b-树的区别","aria-hidden":"true"},"#",-1),g={href:"https://www.cnblogs.com/xueqiuqiu/articles/8779029.html",target:"_blank",rel:"noopener noreferrer"},f=a('<li><p>B数</p><ul><li><p>关键字集合分布在整颗树中；</p></li><li><p>任何一个关键字出现且只出现在一个结点中；</p></li><li><p>搜索有可能在非叶子结点结束；</p></li><li><p>不支持范围查找</p></li></ul><figure><img src="https://cdn.justdopay.com/xiaoshujiang/1629079002404.png" alt="enter description here" tabindex="0" loading="lazy"><figcaption>enter description here</figcaption></figure></li><li><p>b+树相比于b树的查询优势：</p><ul><li><p>b+树的中间节点不保存数据，所以磁盘页能容纳更多节点元素，更“矮胖”；</p></li><li><p>b+树查询必须查找到叶子节点，b树只要匹配到即可不用管元素位置，因此b+树查找更稳定（并不慢）；</p></li><li><p>对于范围查找来说，b+树只需遍历叶子节点链表即可，b树却需要重复地中序遍历，如下两图：</p></li></ul><figure><img src="https://cdn.justdopay.com/xiaoshujiang/1629079028387.png" alt="enter description here" tabindex="0" loading="lazy"><figcaption>enter description here</figcaption></figure></li>',2),_={href:"https://www.cnblogs.com/xueqiuqiu/articles/8779029.html",target:"_blank",rel:"noopener noreferrer"},B=a('<ul><li><p>B数</p><ul><li><p>关键字集合分布在整颗树中；</p></li><li><p>任何一个关键字出现且只出现在一个结点中；</p></li><li><p>搜索有可能在非叶子结点结束；</p></li></ul><figure><img src="https://cdn.justdopay.com/xiaoshujiang/1629079002404.png" alt="enter description here" tabindex="0" loading="lazy"><figcaption>enter description here</figcaption></figure></li><li><p>b+树相比于b树的查询优势：</p><ul><li><p>b+树的中间节点不保存数据，所以磁盘页能容纳更多节点元素，更“矮胖”；</p></li><li><p>b+树查询必须查找到叶子节点，b树只要匹配到即可不用管元素位置，因此b+树查找更稳定（并不慢）；</p></li><li><p>对于范围查找来说，b+树只需遍历叶子节点链表即可，b树却需要重复地中序遍历，如下两图： <img src="https://cdn.justdopay.com/xiaoshujiang/1629079028387.png" alt="enter description here" loading="lazy"></p></li></ul></li></ul>',1),E=e("h4",{id:"索引如何提高检索速度",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#索引如何提高检索速度","aria-hidden":"true"},"#"),l(" 索引如何提高检索速度")],-1),m=e("p",null,"有了上面的基础，我们来看看要找到id为8的记录简要步骤：",-1),x=e("figure",null,[e("img",{src:"https://cdn.justdopay.com/xiaoshujiang/1629079665718.png",alt:"enter description here",tabindex:"0",loading:"lazy"}),e("figcaption",null,"enter description here")],-1),y={href:"https://mp.weixin.qq.com/s?__biz=MzIxNTQ3NDMzMw==&mid=2247483701&idx=1&sn=bd229dd584f51ef4fe545d44ad8cdbf9&chksm=979688c7a0e101d1b5c752094013b78f5bd50ab905257ba82149d85d35ea07aba1a15b0e52b4&mpshare=1&scene=1&srcid=0409Tn66UYWSWvqEVlOpwGtR&key=6cd553e86912686a47d76f2d900b1b5b388c90b29708f016db3a6e1bcebe032220ba63626095c4298f32cda7d0d7bd11bded2365f05c32e522584dd149b98db0bb8549ef144cdca694665d31d35cfeef&ascene=0&uin=MzAzMjU4NDM3Nw%3D%3D&devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.12.4+build(16E195)&version=12020810&nettype=WIFI&lang=zh_CN&fontScale=100&pass_ticket=YHEmqDDX8hHkj5FiSVpQvjYqIMBDHHDS2po4mfJe%2BqIXlqwJI%2Bg7aJUZq0%2BDwGJ0",target:"_blank",rel:"noopener noreferrer"},D=e("h4",{id:"索引如何降低增删改的速度",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#索引如何降低增删改的速度","aria-hidden":"true"},"#"),l(" 索引如何降低增删改的速度")],-1),S=e("p",null,[l("索引采用的结构是B+树，而我们知道B+树是"),e("strong",null,"平衡树"),l("的一种，对数据库执行增删改操作的时候，是会破坏平衡树的特点的，如果不采取额外的操作，B+树就可能退化成"),e("strong",null,"链表"),l("。"),e("strong",null,"因此在执行增删改操作的时候，必须采取额外的操作来维护B+树的特点，而这些额外的开销就降低了增删改的速度")],-1),w=e("li",null,[e("p",null,"平衡树 它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。")],-1),A={href:"https://www.cnblogs.com/wade-luffy/p/6292784.html",target:"_blank",rel:"noopener noreferrer"},j=a('<h3 id="hash索引" tabindex="-1"><a class="header-anchor" href="#hash索引" aria-hidden="true">#</a> Hash索引</h3><p>主流的还是使用B+树索引比较多，对于哈希索引，InnoDB是自适应哈希索引的（hash索引的创建由InnoDB存储引擎引擎自动优化创建，人工干预不了）！</p><h3 id="聚集和非聚集索引" tabindex="-1"><a class="header-anchor" href="#聚集和非聚集索引" aria-hidden="true">#</a> 聚集和非聚集索引</h3><p>聚集索引：以主键创建的索引 非聚集索引：以非主键创建的索引</p><p>一张Innodb引擎的表只能创建一个聚集索引（如果创建表的时候没有指定主键列，InnoDB会自动为每行数据生成一个6字节的rowid，并以此作为主键）</p><p><strong>区别：</strong></p><ol><li>聚集索引在叶子节点存储的是表中的数据</li><li>非聚集索引在叶子节点存储的是主键和索引列，所以使用非聚集索引一般还需要做<strong>回表</strong>操作</li><li>聚集索引一张表只能创建一个，而非聚集所以一张表可以创建多个</li></ol><p>回表：使用非聚集索引查询出数据时，拿到叶子上的主键再去查到想要查找的数据，拿到主键再查找这个过程叫做回表。</p><p>非聚集索引 == 二级索引 == 辅助索引</p><h3 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题" aria-hidden="true">#</a> 面试题</h3><ol><li>使用索引为什么可以加快数据库的检索速度啊？</li><li>为什么说索引会降低插入、删除、修改等维护任务的速度。</li><li>索引的最左匹配原则指的是什么？</li><li>Hash索引和B+树索引有什么区别？主流的使用哪一个比较多？InnoDB存储都支持吗？ <ul><li><p>哈希索引没办法利用索引完成排序</p></li><li><p>不支持最左匹配原则</p></li><li><p>在有大量重复键值情况下，哈希索引的效率也是极低的----&gt;哈希碰撞问题。</p></li><li><p>不支持范围查询</p></li></ul></li><li>聚集索引和非聚集索引有什么区别？ <ol><li><p>聚集索引在叶子节点存储的是表中的数据</p></li><li><p>非聚集索引在叶子节点存储的是主键和索引列，所以使用非聚集索引一般还需要做<strong>回表</strong>操作</p></li><li><p>聚集索引一张表只能创建一个，而非聚集所以一张表可以创建多个</p></li></ol></li></ol>',11),k={href:"https://juejin.im/post/5b55b842f265da0f9e589e79",target:"_blank",rel:"noopener noreferrer"},C=e("br",null,null,-1),I=e("h2",{id:"系统推荐",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#系统推荐","aria-hidden":"true"},"#"),l(" 系统推荐")],-1),M=e("p",null,[e("br"),e("br"),e("br"),e("br"),e("br"),e("br")],-1),T=e("hr",null,null,-1),v=e("hr",null,null,-1),z=e("ul",null,[e("li",null,[e("strong",null,"随机毒鸡汤"),l("：铁杵能磨成针，但木杵只能磨成牙签，材料不对再努力也没用。 "),e("br"),e("br"),e("img",{src:"https://tuapi.eees.cc/api.php?category=biying&type=302&uuid=60df6358-7a19-41d2-8b40-f120b12c9509",alt:"",loading:"lazy"})])],-1);function N(L,q){const o=r("ExternalLinkIcon"),t=r("RouterLink");return p(),d("div",null,[h,e("h3",u,[b,l(),e("a",g,[l("B树和B+树的区别"),i(o)])]),e("ul",null,[f,e("li",null,[e("p",null,[e("a",_,[l("B数和B+数的区别"),i(o)])]),B])]),E,m,x,e("p",null,[l("很明显，如果不使用索引就得遍历所有的数据知道找到目标数据。 关于MySQL中B+树索引更详细的资料参见："),e("a",y,[l("MySql中的B+树索引"),i(o)])]),D,S,e("ul",null,[w,e("li",null,[e("p",null,[l("B+树的具体算法参见："),e("a",A,[l("https://www.cnblogs.com/wade-luffy/p/6292784.html"),i(o)])])])]),j,e("p",null,[l("以上内容部分摘录自："),e("a",k,[l("https://juejin.im/post/5b55b842f265da0f9e589e79"),i(o)])]),C,I,e("ul",null,[e("li",null,[i(t,{to:"/other/HTTP1%200%20vs%20HTTP1%201%20vs%20WebSocket.html"},{default:n(()=>[l("HTTP1 0 vs HTTP1 1 vs WebSocket")]),_:1})]),e("li",null,[i(t,{to:"/other/Censys%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0.html"},{default:n(()=>[l("Censys搜索引擎学习")]),_:1})]),e("li",null,[i(t,{to:"/other/%E6%8F%90%E5%8F%96Docker%E9%95%9C%E5%83%8F%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6.html"},{default:n(()=>[l("提取Docker镜像中的文件")]),_:1})]),e("li",null,[i(t,{to:"/other/Sublime%20Text%20%E6%A0%BC%E5%BC%8F%E5%8C%96JSON.html"},{default:n(()=>[l("Sublime Text 格式化JSON")]),_:1})]),e("li",null,[i(t,{to:"/software/java-basic/Thread%20&%20ExecutorService%20&%20ThreadPoolExecutor%20%E6%80%BB%E8%A7%88.html"},{default:n(()=>[l("Thread & ExecutorService & ThreadPoolExecutor 总览")]),_:1})]),e("li",null,[i(t,{to:"/other/Cornell%20Notes%20System.html"},{default:n(()=>[l("Cornell Notes System")]),_:1})]),e("li",null,[i(t,{to:"/software/unclassified/%E5%A4%9A%E5%8F%B0centos%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%96%87%E4%BB%B6%E4%BA%92%E7%9B%B8%E5%A4%87%E4%BB%BD.html"},{default:n(()=>[l("多台centos服务器，文件互相备份")]),_:1})]),e("li",null,[i(t,{to:"/software/unclassified/gperftools.html"},{default:n(()=>[l("gperftools")]),_:1})]),e("li",null,[i(t,{to:"/other/Git%20Merge%20%E3%80%81Rebase.html"},{default:n(()=>[l("Git Merge 、Rebase")]),_:1})]),e("li",null,[i(t,{to:"/other/Git%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1.html"},{default:n(()=>[l("Git历史记录修改用户名和邮箱")]),_:1})]),e("li",null,[i(t,{to:"/other/MySQL%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E5%88%B0PGSQL.html"},{default:n(()=>[l("MySQL数据迁移到PGSQL")]),_:1})]),e("li",null,[i(t,{to:"/other/PostgreSQL%20JSON%E7%B1%BB%E5%9E%8B%E5%AD%97%E6%AE%B5%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C.html"},{default:n(()=>[l("PostgreSQL JSON类型字段常用操作")]),_:1})])]),M,T,v,z])}const F=s(c,[["render",N],["__file","MySQL索引.html.vue"]]);export{F as default};
