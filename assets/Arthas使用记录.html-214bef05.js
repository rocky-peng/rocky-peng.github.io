import{_ as r,$ as c,a0 as d,a1 as a,a2 as n,a3 as e,a4 as t,a5 as o,w as i}from"./framework-b3a0f150.js";const p={},u=o(`<p>思考如下问题：</p><ol><li>现在有个接口在开发环境非常快，但线上环境就是慢（假设已经知道了就是代码问题，如何定位具体问题）</li><li>我明明改了代码了，为啥子测试环境感觉没生效？ 运维又说更新了代码了，怎么如何确认</li><li>排查问题的时候，想知道某个方法的入参、出参，但是代码里又买有打印相关日志，怎么搞？</li><li>让运维修改了某个配置的值，但运维部署后，始终感觉有问题，感觉没有更改一样，又没有相关日志，怎么确认？</li></ol><h2 id="vmtool" tabindex="-1"><a class="header-anchor" href="#vmtool" aria-hidden="true">#</a> vmtool</h2><p>这个命令可以获取指定类的实例对象，拿到实例对象后还能执行实例方法等。通过help查看使用方法</p><figure><img src="https://cdn.justdopay.com/notion/md5-4112d9049c217b8cd9ee1dc3457a7f4d.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><p>通过这个命令可以拿到指定类的实例，并执行实例的方法，查看字段值等。</p><h3 id="调用方法时创建对象" tabindex="-1"><a class="header-anchor" href="#调用方法时创建对象" aria-hidden="true">#</a> 调用方法时创建对象</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>private Object getXXX(Long p1<span class="token punctuation">,</span>List p2<span class="token punctuation">,</span>Set p3);

可以像下面这样创建对象并调用
vmtool --action getInstances --className com.xxx.XXX --express &#39;instances<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.getXXX(1L<span class="token punctuation">,</span>(#test1=new java.util.ArrayList()<span class="token punctuation">,</span>#test1.add(<span class="token string">&quot;test&quot;</span>)<span class="token punctuation">,</span>#test1)<span class="token punctuation">,</span>(#test=new java.util.HashSet()<span class="token punctuation">,</span>#test.add(<span class="token string">&quot;&quot;</span>)<span class="token punctuation">,</span>#test))&#39;

如果执行vmtool提示类不存在，然后sc却能搜索到类，那么可以加上-c参数来指定类加载器。类加载器可以通过sc -d 类名来获得，例如：

vmtool --action getInstances -c 21b8d17c --className com.xxxxx.XXXXServiceClientImpl --express &#39;instances<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.getCustomerList((#test1=new com.xxxxx.XXXXCustomerListReq()<span class="token punctuation">,</span>#test1.setCreatedAtStart(<span class="token number">1717224477</span>)<span class="token punctuation">,</span>#test1.setCreatedAtEnd(<span class="token number">1719816477</span>)<span class="token punctuation">,</span>#test1.setPageNo(<span class="token number">1</span>)<span class="token punctuation">,</span>#test1.setPageSize(<span class="token number">100</span>)<span class="token punctuation">,</span>#test1)<span class="token punctuation">,</span><span class="token string">&quot;123456&quot;</span>)&#39;

vmtool 条件过滤
trace com.xxxx.XXXXServiceImpl getXXXXConfig  -n <span class="token number">5</span> --skipJDKMethod <span class="token boolean">false</span> &#39;<span class="token string">&quot;20111984&quot;</span>.equalsIgnoreCase(params<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>)&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ognl" tabindex="-1"><a class="header-anchor" href="#ognl" aria-hidden="true">#</a> ognl</h2><h3 id="获取静态属性值" tabindex="-1"><a class="header-anchor" href="#获取静态属性值" aria-hidden="true">#</a> 获取静态属性值</h3><ul><li>格式： ognl -x 2 ‘@类名@静态属性名’</li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>ognl <span class="token operator">-</span>x <span class="token number">1</span> <span class="token string">&#39;@com.xxxx.SpringUtils@applicationContext&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>很有可能出现下面的错误</p><figure><img src="https://cdn.justdopay.com/notion/md5-23d32f676a1fea41242ba0cdf36621a9.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><p>就是提示找不到这个类。这个时候需要先找到加载这个类的classloader（sc -d 类名）</p><p>再执行下面的命令：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>ognl <span class="token operator">-</span>x <span class="token number">1</span> <span class="token operator">-</span>c <span class="token string">&#39;@com.xxxx.SpringUtils@applicationContext&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.justdopay.com/notion/md5-b204ab9cd53ca1bc1265e4d2af50900f.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="获取普通属性值" tabindex="-1"><a class="header-anchor" href="#获取普通属性值" aria-hidden="true">#</a> 获取普通属性值</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>ognl <span class="token operator">-</span>x <span class="token number">3</span> <span class="token string">&#39;#springContext=@com.xxxxx.SpringUtils@applicationContext,#springContext.getBean(&quot;xxxxServiceImpl&quot;).schema&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="调用静态方法" tabindex="-1"><a class="header-anchor" href="#调用静态方法" aria-hidden="true">#</a> 调用静态方法</h3><p>和静态属性很相似</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>ognl <span class="token operator">-</span>x <span class="token number">3</span> <span class="token string">&#39;@com.xxxx.SpringUtils@getBean(&quot;xxxxServiceImpl&quot;)&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="调用实例方法" tabindex="-1"><a class="header-anchor" href="#调用实例方法" aria-hidden="true">#</a> 调用实例方法</h3><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>ognl <span class="token operator">-</span>x <span class="token number">3</span> <span class="token string">&#39;#springContext=@com.xxxx.SpringUtils@applicationContext,#springContext.getBean(&quot;xxxxServiceImpl&quot;)&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ognl扩展阅读" tabindex="-1"><a class="header-anchor" href="#ognl扩展阅读" aria-hidden="true">#</a> ognl扩展阅读</h3>`,26),h={href:"https://commons.apache.org/proper/commons-ognl/language-guide.html",target:"_blank",rel:"noopener noreferrer"},m=o(`<h2 id="watch" tabindex="-1"><a class="header-anchor" href="#watch" aria-hidden="true">#</a> Watch</h2><ul><li>方法调用层级比较多，有问题需要排查，但又没有日志，需要查看某个中间结果的。比如想看calcCrons这个方法的返回是是什么</li></ul><figure><img src="https://cdn.justdopay.com/notion/md5-256041297aa45aa490eb6b0db3b27917.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><ul><li>比如某个方法执行异常了，但是日志中没有打印堆栈信息，这个时候就能快速定位异常位置</li></ul><h2 id="trace" tabindex="-1"><a class="header-anchor" href="#trace" aria-hidden="true">#</a> Trace</h2><p>主要是查看某个方法内部各个节点的耗时情况</p><h3 id="案例一" tabindex="-1"><a class="header-anchor" href="#案例一" aria-hidden="true">#</a> 案例一</h3><p>之前前端同事说下面的接口比较慢</p><p><code>/xxxx/xxxx/xxxx/xxxx/list</code></p><figure><img src="https://cdn.justdopay.com/notion/md5-275c78fc16854272237bb5132af5bb47.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><h3 id="案例二" tabindex="-1"><a class="header-anchor" href="#案例二" aria-hidden="true">#</a> 案例二</h3><p>之前遇到过<code>SecureRandom.getInstanceStrong()</code> 的next这个方法在windows和docker环境中都能正常响应，但在centos（没有采用docker）中就很慢，甚至超时。</p><p>百度搜索：SecureRandom.getInstanceStrong() 就知道具体原因</p><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><h3 id="一键离线安装" tabindex="-1"><a class="header-anchor" href="#一键离线安装" aria-hidden="true">#</a> 一键离线安装</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>mkdir -p /tmp/arthas
wget https<span class="token operator">:</span><span class="token comment">//arthas.aliyun.com/download/latest_version?mirror=aliyun -O /tmp/arthas/arthas.zip</span>
unzip /tmp/arthas/arthas.zip -d /tmp/arthas/
java -jar /tmp/arthas/arthas-boot.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看启用端口" tabindex="-1"><a class="header-anchor" href="#查看启用端口" aria-hidden="true">#</a> 查看启用端口</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>vmtool --action getInstances --className org.springframework.context.ConfigurableApplicationContext --express &#39;instances<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.getEnvironment().getProperty(<span class="token string">&quot;server.port&quot;</span>)&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看数据库连接" tabindex="-1"><a class="header-anchor" href="#查看数据库连接" aria-hidden="true">#</a> 查看数据库连接</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>vmtool --action getInstances --className com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper --express &#39;instances<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.basicProperties&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="查看contextpath" tabindex="-1"><a class="header-anchor" href="#查看contextpath" aria-hidden="true">#</a> 查看contextPath</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>vmtool --action getInstances --className org.springframework.context.ConfigurableApplicationContext --express &#39;instances<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.getEnvironment().getProperty(<span class="token string">&quot;server.context-path&quot;</span>)&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="系统推荐" tabindex="-1"><a class="header-anchor" href="#系统推荐" aria-hidden="true">#</a> 系统推荐</h2>`,24),g=a("p",null,[a("br"),a("br"),a("br"),a("br"),a("br"),a("br")],-1),x=a("hr",null,null,-1),v=a("hr",null,null,-1),b=a("ul",null,[a("li",null,[a("strong",null,"随机毒鸡汤"),n("：你就是个黄焖鸡，又黄又闷又垃圾。 "),a("br"),a("br"),a("img",{src:"https://tuapi.eees.cc/api.php?category=biying&type=302&uuid=43353fcc-bc23-4717-971c-3525f94faaaa",alt:"",loading:"lazy"})])],-1);function f(k,E){const l=i("ExternalLinkIcon"),s=i("RouterLink");return c(),d("div",null,[u,a("p",null,[a("a",h,[n("https://commons.apache.org/proper/commons-ognl/language-guide.html"),e(l)])]),m,a("ul",null,[a("li",null,[e(s,{to:"/software/middleware/es/ES6.2.3(3%E8%8A%82%E7%82%B9)%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E5%88%B0ES7.4.1(5%E8%8A%82%E7%82%B9).html"},{default:t(()=>[n("ES6.2.3(3节点)数据迁移到ES7.4.1(5节点)")]),_:1})]),a("li",null,[e(s,{to:"/software/spring/Spring%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%85%B3%E9%94%AE%E7%82%B9.html"},{default:t(()=>[n("Spring框架源码关键点")]),_:1})]),a("li",null,[e(s,{to:"/other/PostgreSQL%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD.html"},{default:t(()=>[n("PostgreSQL定时备份")]),_:1})]),a("li",null,[e(s,{to:"/software/java-basic/Thread%20&%20ExecutorService%20&%20ThreadPoolExecutor%20%E6%80%BB%E8%A7%88.html"},{default:t(()=>[n("Thread & ExecutorService & ThreadPoolExecutor 总览")]),_:1})]),a("li",null,[e(s,{to:"/software/middleware/mq/kafka.html"},{default:t(()=>[n("kafka")]),_:1})]),a("li",null,[e(s,{to:"/software/middleware/es/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84elk%E5%B9%B3%E5%8F%B0%E6%9D%A5%E5%88%86%E6%9E%90java%E6%97%A5%E5%BF%97.html"},{default:t(()=>[n("搭建基于docker的elk平台来分析java日志")]),_:1})]),a("li",null,[e(s,{to:"/other/Spring%20Boot%E5%8D%87%E7%BA%A7%E5%88%B02%206%20x%E8%B8%A9%E7%9A%84%E5%9D%91.html"},{default:t(()=>[n("Spring Boot升级到2 6 x踩的坑")]),_:1})]),a("li",null,[e(s,{to:"/software/unclassified/%E5%88%B6%E4%BD%9CKVM%20ES%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6.html"},{default:t(()=>[n("制作KVM ES镜像文件")]),_:1})]),a("li",null,[e(s,{to:"/other/JetBrains-License-Server.html"},{default:t(()=>[n("JetBrains-License-Server")]),_:1})]),a("li",null,[e(s,{to:"/software/java-basic/ReentrantLock%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB.html"},{default:t(()=>[n("ReentrantLock源码解读")]),_:1})]),a("li",null,[e(s,{to:"/other/vuepress-theme-hope%20%E6%B7%BB%E5%8A%A0%E8%B0%B7%E6%AD%8C%E5%B9%BF%E5%91%8A.html"},{default:t(()=>[n("vuepress-theme-hope 添加谷歌广告")]),_:1})]),a("li",null,[e(s,{to:"/software/unclassified/%E5%88%86%E5%B8%83%E5%BC%8F%E9%97%AE%E9%A2%98.html"},{default:t(()=>[n("分布式问题")]),_:1})])]),g,x,v,b])}const _=r(p,[["render",f],["__file","Arthas使用记录.html.vue"]]);export{_ as default};
