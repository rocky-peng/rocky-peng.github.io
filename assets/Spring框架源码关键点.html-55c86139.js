import{_ as o,$ as i,a0 as p,a1 as n,a3 as t,a4 as e,a5 as c,a2 as a,w as l}from"./framework-b3a0f150.js";const r={},u=c(`<p>CommonAnnotationBeanPostProcessor</p><p>AutowiredAnnotationBeanPostProcessor</p><p>BeanDefinition</p><p>DefaultListableBeanFactory</p><p>GenericApplicationContext</p><p>AnnotationConfigApplicationContext</p><p>DefaultListableBeanFactory is a key delegate of GenericApplicationContext container</p><p>通过 BeanPostProcessor 实现的aop，相关的还有 LoadTimeWeaver</p><p>compatible 兼容的 complicated 复杂的</p><p>explicitly： 显式的 implicitly： 隐式的</p><p>CopyOnWriteArrayList</p><p>Spring’s DataBinder and the lower-level BeanWrapper both use PropertyEditorSupport implementations to parse and format property values.</p><p>BeanFactory:</p><p>单例的存放位置：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
1. 非工厂bean创建的单例对象
org.springframework.beans.factory.support.DefaultSingletonBeanRegistry#singletonObjects

private final Map&lt;String, Object&gt; singletonObjects = new ConcurrentHashMap&lt;&gt;(256);

2. 由工厂bean创建的单例对象
org.springframework.beans.factory.support.FactoryBeanRegistrySupport#factoryBeanObjectCache

private final Map&lt;String, Object&gt; factoryBeanObjectCache = new ConcurrentHashMap&lt;&gt;(16);

3. 针对class=&quot;\${custom.strategy.class}&quot;的解析代码在
org.springframework.beans.factory.support.AbstractBeanFactory#evaluateBeanDefinitionString

4. 根据BeanDefinition创建bean的代码在
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBean(java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.lang.Object[])


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>策略模式：做同一件事的不同方法</p><hr><h3 id="getbean-string-的过程" tabindex="-1"><a class="header-anchor" href="#getbean-string-的过程" aria-hidden="true">#</a> getBean(String)的过程</h3><figure><img src="https://cdn.justdopay.top/xiaoshujiang/1629079451862.png" alt="getBean(String)的过程" tabindex="0" loading="lazy"><figcaption>getBean(String)的过程</figcaption></figure><p>bean的初始化过程：</p><ol><li><p>找到构造方法</p><ol><li>可能是普通的构造方法</li><li>可能是工厂方法</li></ol></li><li><p>执行构造方法 执行策略：cglib和simple，具体参考InstantiationStrategy接口的实现类。 这一步仅仅创建了这么一个实例，但还没有进行DI等操作。</p></li><li><p>执行 MergedBeanDefinitionPostProcessor#postProcessMergedBeanDefinition</p></li><li><p>对实例的字段进行赋值 如果被赋值的对象是一个引用，会<s>递归</s>(不确定是否是单线程递归，如果单线程递归的话那循环引用怎么处理的？)进行创建</p></li><li><p>初始化对象</p><ol><li>invokeAwareMethods</li><li>applyBeanPostProcessorsBeforeInitialization 这个方法就是在应用BeanProcessors的 postProcessBeforeInitialization 方法 这里面就包含了对 javax.annotation.PostConstruct 注解方法的执行</li><li>invokeInitMethods <ol><li>InitializingBean#afterPropertiesSet</li><li>自定义的init-method</li></ol></li><li>applyBeanPostProcessorsAfterInitialization 这个方法就是在应用BeanProcessors的 postProcessAfterInitialization 方法 这里面就包含了对 javax.annotation.PreDestroy 注解方法的执行</li></ol></li><li><p>doGetBean通过name的查找bean的过程（name不带地址符）</p><ol><li>获取name对应的规范名称。（如果name本身就是规范名称，则直接返回，如果是别名，则返回别名对应的规范名称）</li><li>尝试从缓存中获取实例</li><li></li></ol></li></ol><p>初始化过程个人觉得太复杂了，让你不容易理解。Spring也许是为了追求代码的重复利用，我去完成的话，我可能偏向代码的阅读性，当然也许经过很多版本的迭代后也会成为类似Spring这样的代码</p><p>好像针对任何一步输入都设置了回调方法能够进行对输入进行更改 比如：BeanPostProcessor的很多子接口和实现类</p><p>关于实例化和初始化的回调。</p><ol><li><p>实例化前 postProcessBeforeInstantiation</p></li><li><p>实例化后 postProcessAfterInstantiation</p></li><li><p>初始化前 postProcessBeforeInitialization</p></li><li><p>初始化后 postProcessAfterInitialization</p></li><li><p>对属性值的修改 postProcessProperties</p></li><li><p>对BeanDefinition对象进行操作 postProcessMergedBeanDefinition</p></li></ol><hr><h3 id="initdestroyannotationbeanpostprocessor" tabindex="-1"><a class="header-anchor" href="#initdestroyannotationbeanpostprocessor" aria-hidden="true">#</a> InitDestroyAnnotationBeanPostProcessor</h3><h3 id="commonannotationbeanpostprocessor" tabindex="-1"><a class="header-anchor" href="#commonannotationbeanpostprocessor" aria-hidden="true">#</a> CommonAnnotationBeanPostProcessor</h3><h4 id="支持解析的注解" tabindex="-1"><a class="header-anchor" href="#支持解析的注解" aria-hidden="true">#</a> 支持解析的注解</h4><ol><li>Resource（来自JSR-250 javax.annotation.Resource）</li><li>PostConstruct （ javax.annotation.PostConstruct）</li><li>PreDestroy （ javax.annotation.PreDestroy）</li><li>WebServiceRef （javax.xml.ws.WebServiceRef）</li><li>EJB （javax.ejb.EJB）</li></ol><h3 id="autowiredannotationbeanpostproccessor" tabindex="-1"><a class="header-anchor" href="#autowiredannotationbeanpostproccessor" aria-hidden="true">#</a> AutowiredAnnotationBeanPostProccessor</h3><h4 id="默认支持解析的注解" tabindex="-1"><a class="header-anchor" href="#默认支持解析的注解" aria-hidden="true">#</a> 默认支持解析的注解</h4><p>AutowiredAnnotationBeanPostProccessor 类支持解析三个注解：</p><ol><li>@Autowired</li><li>@Value</li><li>@Inject （来自JSR-330 javax.inject.Inject） 使用@Inject注解的地方都能使用@Autowired注解替换</li></ol><h4 id="查找指定注解元数据的过程" tabindex="-1"><a class="header-anchor" href="#查找指定注解元数据的过程" aria-hidden="true">#</a> 查找指定注解元数据的过程</h4><ol><li>ReflectionUtils.doWithLocalFields 遍历指定类的所有field，在field上找</li><li>ReflectionUtils.doWithLocalMethods 遍历指定类的所有方法，在method上找</li><li>获取指定的父类，循环上述过程</li></ol><p>注意：如果字段或者方法上同时添加了@Value @Autowired @Inject注解，只会处理一个注解，处理哪个注解呢？ 这个加入的顺序了。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">private</span> <span class="token class-name">MergedAnnotation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAutowiredAnnotation</span><span class="token punctuation">(</span><span class="token class-name">AccessibleObject</span> ao<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">MergedAnnotations</span> annotations <span class="token operator">=</span> <span class="token class-name">MergedAnnotations</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>ao<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> type <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autowiredAnnotationTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">MergedAnnotation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> annotation <span class="token operator">=</span> annotations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">//找到一个目标注解就返回。  也就是说如果一个字段或者方法同时加了 Autowired Value Inject注解，Autowired的优先级最高。</span>
			<span class="token comment">//具体哪个优先级最好，看加入的顺序了</span>
			<span class="token keyword">return</span> annotation<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="疑问" tabindex="-1"><a class="header-anchor" href="#疑问" aria-hidden="true">#</a> 疑问</h3><h4 id="为什么spring里很多地方要对concurrenthashmap对象进行加锁" tabindex="-1"><a class="header-anchor" href="#为什么spring里很多地方要对concurrenthashmap对象进行加锁" aria-hidden="true">#</a> 为什么Spring里很多地方要对ConcurrentHashMap对象进行加锁？</h4><hr><h3 id="spring的dcl案例" tabindex="-1"><a class="header-anchor" href="#spring的dcl案例" aria-hidden="true">#</a> Spring的DCL案例：</h3><h4 id="autowiredannotationbeanpostprocessor-findautowiringmetadata" tabindex="-1"><a class="header-anchor" href="#autowiredannotationbeanpostprocessor-findautowiringmetadata" aria-hidden="true">#</a> AutowiredAnnotationBeanPostProcessor#findAutowiringMetadata</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">InjectionMetadata</span> <span class="token function">findAutowiringMetadata</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">PropertyValues</span> pvs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Fall back to class name as cache key, for backwards compatibility with custom callers.</span>
	<span class="token class-name">String</span> cacheKey <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">?</span> beanName <span class="token operator">:</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// Quick check on the concurrent map first, with minimal locking.</span>
	<span class="token class-name">InjectionMetadata</span> metadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>injectionMetadataCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//存在一个 DCL</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">InjectionMetadata</span><span class="token punctuation">.</span><span class="token function">needsRefresh</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>injectionMetadataCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			metadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>injectionMetadataCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">InjectionMetadata</span><span class="token punctuation">.</span><span class="token function">needsRefresh</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>metadata <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					metadata<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span>pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				metadata <span class="token operator">=</span> <span class="token function">buildAutowiringMetadata</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>injectionMetadataCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> metadata<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="abstractbeanfactory-markbeanascreated" tabindex="-1"><a class="header-anchor" href="#abstractbeanfactory-markbeanascreated" aria-hidden="true">#</a> AbstractBeanFactory#markBeanAsCreated</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">markBeanAsCreated</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>alreadyCreated<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mergedBeanDefinitions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>alreadyCreated<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// Let the bean definition get re-merged now that we&#39;re actually creating</span>
				<span class="token comment">// the bean... just in case some of its metadata changed in the meantime.</span>
				<span class="token function">clearMergedBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>alreadyCreated<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="smartinitializingsingleton" tabindex="-1"><a class="header-anchor" href="#smartinitializingsingleton" aria-hidden="true">#</a> SmartInitializingSingleton</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SmartInitializingSingleton</span> <span class="token punctuation">{</span>
    <span class="token comment">//在所有bean执行了getBean后才会执行这个方法</span>
	<span class="token keyword">void</span> <span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="替换占位符的查找位置" tabindex="-1"><a class="header-anchor" href="#替换占位符的查找位置" aria-hidden="true">#</a> 替换占位符的查找位置</h3><ol><li>应用本身指定的配置信息</li><li>System.getProperties();</li><li>System.getenv(); 代码如下：（在ConfigurableApplicationnContext中）</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Name of the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Environment</span></span><span class="token punctuation">}</span> bean in the factory.
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * Environment实例的名字
 *
 * <span class="token keyword">@since</span> 3.1
 */</span>
<span class="token class-name">String</span> <span class="token constant">ENVIRONMENT_BEAN_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;environment&quot;</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Name of the System properties bean in the factory.
 *
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">System</span><span class="token punctuation">#</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
 */</span>
<span class="token class-name">String</span> <span class="token constant">SYSTEM_PROPERTIES_BEAN_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;systemProperties&quot;</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Name of the System environment bean in the factory.
 *
 * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">System</span><span class="token punctuation">#</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
 */</span>
<span class="token class-name">String</span> <span class="token constant">SYSTEM_ENVIRONMENT_BEAN_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;systemEnvironment&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="applicationcontext事件的发布" tabindex="-1"><a class="header-anchor" href="#applicationcontext事件的发布" aria-hidden="true">#</a> ApplicationContext事件的发布</h3><p>发布一个事件后，不仅会在本容器中发布还会在父容器中发布。 代码在：AbstractApplicationContext#publishEvent(java.lang.Object, org.springframework.core.ResolvableType)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 发布一个事件后，不仅会在本容器中发布，还会在父容器中发布</span>
<span class="token comment">// Publish event via parent context as well...</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token keyword">instanceof</span> <span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一些内置组件的名字" tabindex="-1"><a class="header-anchor" href="#一些内置组件的名字" aria-hidden="true">#</a> 一些内置组件的名字</h3><h4 id="abstractapplicationcontext中定义的" tabindex="-1"><a class="header-anchor" href="#abstractapplicationcontext中定义的" aria-hidden="true">#</a> AbstractApplicationContext中定义的</h4><ol><li>messageSource</li><li>lifycycleProcessor</li><li>applicationEventMulticaster</li></ol><h4 id="configurableapplicationcontext中定义的" tabindex="-1"><a class="header-anchor" href="#configurableapplicationcontext中定义的" aria-hidden="true">#</a> ConfigurableApplicationContext中定义的</h4><ol><li>conversionService</li><li>loadTimeWeaver</li><li>environment</li></ol><h3 id="application启动流程" tabindex="-1"><a class="header-anchor" href="#application启动流程" aria-hidden="true">#</a> Application启动流程</h3><ol><li>初始化环境，也就是初始化配置文件。 比如 xxx.properties xxxx.yml</li><li>初始化BeanDefinition</li></ol><h3 id="mergedbeandefinitionpostprocessor" tabindex="-1"><a class="header-anchor" href="#mergedbeandefinitionpostprocessor" aria-hidden="true">#</a> MergedBeanDefinitionPostProcessor</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MergedBeanDefinitionPostProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * 
	 * 调用时机：实例化bean后，初始化bean前
	 */</span>
	<span class="token keyword">void</span> <span class="token function">postProcessMergedBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">RootBeanDefinition</span> beanDefinition<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanType<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">resetBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="instantiationawarebeanpostprocessor" tabindex="-1"><a class="header-anchor" href="#instantiationawarebeanpostprocessor" aria-hidden="true">#</a> InstantiationAwareBeanPostProcessor</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * 实例化前调用的，返回null表示采用默认的实例化方法
	 */</span>
	<span class="token annotation punctuation">@Nullable</span>
	<span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInstantiation</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/**
	 * 实例化后调用的
	 * 返回true: 表示应该执行populateBean
	 * 返回false：表示应该跳过执行populateBean
	 */</span>
	<span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">postProcessAfterInstantiation</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/**
	* 执行postProcessAfterInstantiation后调用这个方法
	*/</span>
	<span class="token annotation punctuation">@Nullable</span>
	<span class="token keyword">default</span> <span class="token class-name">PropertyValues</span> <span class="token function">postProcessProperties</span><span class="token punctuation">(</span><span class="token class-name">PropertyValues</span> pvs<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span>
			<span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>

		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token doc-comment comment">/**
	* 已过期，由postProcessProperties方法替代
	*/</span>
	<span class="token annotation punctuation">@Deprecated</span>
	<span class="token annotation punctuation">@Nullable</span>
	<span class="token keyword">default</span> <span class="token class-name">PropertyValues</span> <span class="token function">postProcessPropertyValues</span><span class="token punctuation">(</span>
			<span class="token class-name">PropertyValues</span> pvs<span class="token punctuation">,</span> <span class="token class-name">PropertyDescriptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pds<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>

		<span class="token keyword">return</span> pvs<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="系统推荐" tabindex="-1"><a class="header-anchor" href="#系统推荐" aria-hidden="true">#</a> 系统推荐</h2>`,67),d=n("p",null,[n("br"),n("br"),n("br"),n("br"),n("br"),n("br")],-1),k=n("hr",null,null,-1),v=n("hr",null,null,-1),m=n("ul",null,[n("li",null,[n("strong",null,"随机毒鸡汤"),a("：我不主动，不是你不重要，而是我不知道我重不重要。 "),n("br"),n("br"),n("img",{src:"https://images.pexels.com/photos/31625644/pexels-photo-31625644.jpeg?auto=compress&cs=tinysrgb&h=650&w=940",alt:"",loading:"lazy"})])],-1);function b(h,f){const s=l("RouterLink");return i(),p("div",null,[u,n("ul",null,[n("li",null,[t(s,{to:"/software/unclassified/RSA%20%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88.html"},{default:e(()=>[a("RSA 加密解密多语言实现方案")]),_:1})]),n("li",null,[t(s,{to:"/software/docker/Docker%E8%BF%9B%E8%A1%8C%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB.html"},{default:e(()=>[a("Docker进行资源隔离")]),_:1})]),n("li",null,[t(s,{to:"/other/%E6%9D%A5%E4%B8%AAJVM%E5%86%B7%E7%9F%A5%E8%AF%86.html"},{default:e(()=>[a("来个JVM冷知识")]),_:1})]),n("li",null,[t(s,{to:"/other/K8S%20%E6%97%A0%E6%84%9F%E5%8F%91%E5%B8%83.html"},{default:e(()=>[a("K8S 无感发布")]),_:1})]),n("li",null,[t(s,{to:"/other/Spring%20RetryTemplate.html"},{default:e(()=>[a("Spring RetryTemplate")]),_:1})]),n("li",null,[t(s,{to:"/software/unclassified/%E7%BA%BF%E4%B8%8AFullGC%E9%A2%91%E7%B9%81%E7%9A%84%E6%8E%92%E6%9F%A5.html"},{default:e(()=>[a("线上FullGC频繁的排查")]),_:1})]),n("li",null,[t(s,{to:"/other/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88.html"},{default:e(()=>[a("数据同步方案")]),_:1})]),n("li",null,[t(s,{to:"/software/java-basic/AQS%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB.html"},{default:e(()=>[a("AQS源码解读")]),_:1})]),n("li",null,[t(s,{to:"/software/unclassified/%E5%88%B6%E4%BD%9CKVM%20ES%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6.html"},{default:e(()=>[a("制作KVM ES镜像文件")]),_:1})]),n("li",null,[t(s,{to:"/other/vuepress/vuepress-theme-hope%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97.html"},{default:e(()=>[a("vuepress-theme-hope使用心得")]),_:1})]),n("li",null,[t(s,{to:"/other/Mermaid%E7%A4%BA%E4%BE%8B.html"},{default:e(()=>[a("Mermaid示例")]),_:1})]),n("li",null,[t(s,{to:"/other/K8S%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"},{default:e(()=>[a("K8S常用命令")]),_:1})])]),d,k,v,m])}const y=o(r,[["render",b],["__file","Spring框架源码关键点.html.vue"]]);export{y as default};
