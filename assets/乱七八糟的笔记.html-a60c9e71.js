import{_ as p,$ as c,a0 as r,a1 as n,a2 as a,a3 as s,a4 as l,a5 as t,w as o}from"./framework-b3a0f150.js";const d={},u=t(`<h1 id="java-自带的动态代理实现原理。" tabindex="-1"><a class="header-anchor" href="#java-自带的动态代理实现原理。" aria-hidden="true">#</a> Java 自带的动态代理实现原理。</h1><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>核心方法：
<span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> cl<span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span><span class="token class-name">InvocationHandler</span> iv<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如果是我会怎么实现newproxyinstance这个方法" tabindex="-1"><a class="header-anchor" href="#如果是我会怎么实现newproxyinstance这个方法" aria-hidden="true">#</a> 如果是我会怎么实现newProxyInstance这个方法</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>主要思路：
第一步：生成字符串形式的代码
第二部：把字符串形式的代码编译为Class对象。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第一步" tabindex="-1"><a class="header-anchor" href="#第一步" aria-hidden="true">#</a> 第一步</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>无非就是字符串的拼接。如果我们按照正常写代码的步骤能写出来，那么这一步也就没有问题。每个生成的方法都调用invocationHandler的invoke方法。

invoke方法需要三个参数：<span class="token class-name">Object</span> <span class="token class-name">Methond</span> args

正常写代码应该是这样子：

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DemoInterface</span> <span class="token punctuation">{</span>

	<span class="token class-name">String</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoProxy</span> <span class="token keyword">implements</span> <span class="token class-name">DemoInterface</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token class-name">InvocationHandler</span> iv<span class="token punctuation">;</span>
	
	<span class="token keyword">public</span> <span class="token class-name">DemoProxy</span><span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span> iv<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>iv <span class="token operator">=</span> iv<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">Method</span> m <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;speak&quot;</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>str<span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iv<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二步" tabindex="-1"><a class="header-anchor" href="#第二步" aria-hidden="true">#</a> 第二步</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>字符串形式的代码有了，下面就是编译为Class对象。

jdk提供了JavaCompiler这个功能能完成这个工作。具体代码不用太关心，只需要知道可以做到这个工作就可以了。确实需要的话，百度下JavaCompiler就能知道。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="proxy类的实现方式" tabindex="-1"><a class="header-anchor" href="#proxy类的实现方式" aria-hidden="true">#</a> Proxy类的实现方式</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>其实思路大同小异。
Proxy的实现也是反射获取接口中定义的方法，然后根据class文件的二进制格式来生成一个byte数组（代表的就是代理类的class文件二进制），然后通过类加载器装载为一个Class对象
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="红黑树-5个特征-简化为4个" tabindex="-1"><a class="header-anchor" href="#红黑树-5个特征-简化为4个" aria-hidden="true">#</a> 红黑树（5个特征，简化为4个）</h1><ol><li>根黑叶黑</li><li>父红子黑</li><li>非红即黑</li><li>黑相同</li></ol><h2 id="简单请求和复杂请求" tabindex="-1"><a class="header-anchor" href="#简单请求和复杂请求" aria-hidden="true">#</a> 简单请求和复杂请求</h2><h2 id="用户态和内核态-用户空间、内核空间" tabindex="-1"><a class="header-anchor" href="#用户态和内核态-用户空间、内核空间" aria-hidden="true">#</a> 用户态和内核态（用户空间、内核空间）</h2><ol start="3"><li>用户态线程和内核态线程存在一个映射模型（one-to-one、many-to-one、many-to-many）,linux和jvm采用的是one-to-one</li><li>用户态和内核态之前的切换，也就是用户态线程和内核态线程之前的切换，那么就会涉及到线程的切换，所以用户态和内核态之间的切换是有代价的</li><li>切换原因： <ol><li>系统调用（软中断）</li><li>外设中断</li><li>异常</li></ol></li></ol><h2 id="mongo与mysql如何保证数据一致性" tabindex="-1"><a class="header-anchor" href="#mongo与mysql如何保证数据一致性" aria-hidden="true">#</a> mongo与mysql如何保证数据一致性</h2><p>比如某个请求，会同时更改mysql和mongo里的数据，如何保证同时成功或同时失败</p><p>方案： 需要事务的时候，把对mongo更新操作转换为对mysql的操作。 然后通过canal把mysql中mongo的操作在mongo中进行重做</p><p>tcp 可靠字节流连接</p><p>三次握手 a--&gt;b: 我要和你通话(syn) b--&gt;a: 好的，我准备好了(syn+ack) a--&gt;b: 好的(ack)</p><p>网络io</p><p>内核要做的事情：</p>`,23),m=t("<li><p>准备数据到来</p></li><li><p>复制数据到用户内存</p></li><li><p>虚拟内存背后可能是物理内存，也可能是磁盘</p></li><li><p>每个进程有各自的page table，也就是每个进程都有各自的虚拟内存</p></li><li><p>32位机子，虚拟内存大小为4G，64位机子，虚拟内存大小为2^34G</p></li><li><p>虚拟内存可以划分为两部分，高1/4的内存，称之为内核空间，剩下的虚拟内存称之为用户空间</p></li><li><p>谈虚拟内存就要谈进程，脱离进程谈虚拟内存没有意义</p></li><li><p>内核空间总是驻留在物理内存中，当新建进程或进程消亡的时候，在进程对应的page table中与虚拟内存进行映射</p></li><li><p>内核空间中，有些是进程共享的，有些是进程私有的，也就是说不同进程的内核空间可能映射到相同的物理内存上</p></li><li><p>共享的内核空间：内核数据，内核代码等</p></li><li><p>私有的内核空间：内核栈，页表等</p></li><li><p>DMA 的全称叫直接内存存取（Direct Memory Access），是一种允许外围设备（硬件子系统）直接访问系统主内存的机制</p></li><li><p>直接内存和直接io不是一回事，直接内存是直接操作物理内存，直接io是直接操作io设备。直接io可以跳过page cache机制，也是一种实现零拷贝的方案（jvm不支持）</p></li>",13),h={href:"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/systemtap_beginners_guide/iotimesect",target:"_blank",rel:"noopener noreferrer"},k=n("li",null,[n("p",null,"mmap: 是将一个进程的地址空间中的一段虚拟地址映射到磁盘文件地址，page cache仍会参与进来")],-1),v=n("li",null,[n("p",null,"零拷贝并非完全没有拷贝，只要相对于传统的io方式少了一次或多次拷贝都可以称之为零拷贝")],-1),b=n("li",null,[n("p",null,"mappedbytebuffer： 可以理解为是在内核空间开辟了一块内存，应用程序可以读写这块内存，同时和磁盘文件有关联，底层采用的mmap实现")],-1),E=n("li",null,[n("p",null,"执行mmap后，会马上分配虚拟内存，但不会马上映射物理内存。（个人猜测：为什么rocketmq的commitlog文件映射的是1g大小，是因为考虑到一些32位服务器的虚拟内存最大也就4G，用户空间还只有3G，如果分配过大，虚拟内存都不够了，更不谈物理内存是否足够 ）")],-1),g=t('<p>进程向系统申请内存 系统检查进程的虚拟内存是否使用完，有剩余则分配 系统分配物理内存</p><p>虚拟内存分为内核空间和用户空间</p><ol start="15"><li>在linux系统中线程的本质是进程，然后每个进程直接的内存不能互相访问，但实际情况是可以互相访问的，这是怎么做到的？</li></ol><p>关于用户态和内核态</p><ol><li>同一个线程不能在用户态和内核态直接切换，从创建到消亡，只能在一个状态下工作</li><li>谈到用户态和内核态，都是只用户态线程和内核态线程</li></ol><p>用户态到内核态的三种方式：</p><ol><li>系统调用，本质也是中断，不过是软中断</li><li>异常</li><li>外设中断</li></ol><p>page cache: 文件系统的缓存。</p><ol><li>应用程序发起读文件操作</li><li>操作系统检查page cache中是否有，有则直接返回</li><li>如果没有，则由dma进行磁盘读操作</li><li>dma把数据从磁盘读入（复制）到page cache （dma copy）</li><li>cpu介入，把</li></ol><h2 id="rocketmq" tabindex="-1"><a class="header-anchor" href="#rocketmq" aria-hidden="true">#</a> rocketmq</h2><ol><li><p>异步、解耦、消峰（个人认为主要用途是消峰，解决速度不匹配的问题，其他两个左右都有代价更小的替代方案）</p></li><li><p>一个topic可以包含多个队列</p></li><li><p>同一个队列只能被同一个消费组里一个消费者消费</p></li><li><p>一个消费者可以同时消费多个队列 <img src="https://cdn.justdopay.com/pasteimageintomarkdown/2022-08-18/165136595919700.png" alt="" loading="lazy"><img src="https://cdn.justdopay.com/pasteimageintomarkdown/2022-08-18/165160051141500.png" alt="" loading="lazy"></p></li><li><p>消费者组里的消费者个数最好大于等于主题里队列的个数</p></li><li><p>如果业务要求消费顺序和发送顺序要一致，这种情况个人觉得一个topic多个队列和一个topic一个队列没啥区别。但如果不要求一直，那么建议一个topic多个队列</p></li><li><p>rocketmq的事务消息，是指本地事务和消息发出去的一致性，也就是如果本地事务执行成功，那么消息就能发到brocker并被消费者正常消费。但如果本地事务执行不成功，那么消息就不会被消费者消费到。是指的这个</p></li><li><p>rocketmq的官方架构图 <img src="https://cdn.justdopay.com/pasteimageintomarkdown/2022-08-18/169424598376100.png" alt="" loading="lazy"></p></li><li><p>rocketmq的主从结构中，当master挂了后，slave只能提供读服务，不能提供写服务（这是老版本了，新版本用raft算法能选举新的leader节点）</p></li></ol><h2 id="docker-容器-oom-异常重启" tabindex="-1"><a class="header-anchor" href="#docker-容器-oom-异常重启" aria-hidden="true">#</a> docker 容器 oom，异常重启</h2><p>排查原因发现：</p><ol><li>xmx设置的内存大于了分配给这个容器的内存</li></ol><h2 id="docker-events-命令" tabindex="-1"><a class="header-anchor" href="#docker-events-命令" aria-hidden="true">#</a> docker events 命令</h2>',15),_={href:"https://www.kancloud.cn/woshigrey/docker/935883",target:"_blank",rel:"noopener noreferrer"},f=n("br",null,null,-1),y=n("h2",{id:"系统推荐",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#系统推荐","aria-hidden":"true"},"#"),a(" 系统推荐")],-1),x=n("p",null,[n("br"),n("br"),n("br"),n("br"),n("br"),n("br")],-1),A=n("hr",null,null,-1),B=n("hr",null,null,-1),w=n("ul",null,[n("li",null,[n("strong",null,"随机毒鸡汤"),a("：原则上不行就是可以，原则上可以就是不行。 "),n("br"),n("br"),n("img",{src:"https://tuapi.eees.cc/api.php?category=fengjing&type=302&uuid=e2a02b54-cabc-467e-ba78-1e755a84330c",alt:"",loading:"lazy"})])],-1);function D(C,j){const i=o("ExternalLinkIcon"),e=o("RouterLink");return c(),r("div",null,[u,n("ol",null,[m,n("li",null,[n("p",null,[n("a",h,[a("https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/systemtap_beginners_guide/iotimesect"),s(i)])])]),k,v,b,E]),g,n("p",null,[a("通过docker events命令可以查看各种事件 扩展阅读："),n("a",_,[a("https://www.kancloud.cn/woshigrey/docker/935883"),s(i)])]),f,y,n("ul",null,[n("li",null,[s(e,{to:"/software/unclassified/MAT%E5%B7%A5%E5%85%B7.html"},{default:l(()=>[a("MAT工具")]),_:1})]),n("li",null,[s(e,{to:"/software/unclassified/Btrace%E5%85%A5%E9%97%A8.html"},{default:l(()=>[a("Btrace入门")]),_:1})]),n("li",null,[s(e,{to:"/software/unclassified/%E5%90%84%E7%A7%8D%E7%BD%91%E5%85%B3%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95.html"},{default:l(()=>[a("各种网关性能测试")]),_:1})]),n("li",null,[s(e,{to:"/software/unclassified/%E6%B5%8B%E8%AF%95%E4%B8%A4%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%97%B4%E7%9A%84%E7%BD%91%E9%80%9F.html"},{default:l(()=>[a("测试两台服务器间的网速")]),_:1})]),n("li",null,[s(e,{to:"/other/Censys%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0.html"},{default:l(()=>[a("Censys搜索引擎学习")]),_:1})]),n("li",null,[s(e,{to:"/other/Spring%20RetryTemplate.html"},{default:l(()=>[a("Spring RetryTemplate")]),_:1})]),n("li",null,[s(e,{to:"/software/unclassified/%E7%BA%BF%E4%B8%8AFullGC%E9%A2%91%E7%B9%81%E7%9A%84%E6%8E%92%E6%9F%A5.html"},{default:l(()=>[a("线上FullGC频繁的排查")]),_:1})]),n("li",null,[s(e,{to:"/other/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88.html"},{default:l(()=>[a("数据同步方案")]),_:1})]),n("li",null,[s(e,{to:"/software/middleware/mysql/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.html"},{default:l(()=>[a("InnoDB存储引擎")]),_:1})]),n("li",null,[s(e,{to:"/other/%E8%A1%8C%E8%BD%AC%E5%88%97%E4%B8%8D%E5%86%8D%E5%A4%8D%E6%9D%82%EF%BC%9ASQL%E9%AB%98%E6%89%8B%E9%83%BD%E5%9C%A8%E7%94%A8%E7%9A%84%E6%8A%80%E5%B7%A7%E6%8F%AD%E7%A7%98.html"},{default:l(()=>[a("行转列不再复杂：SQL高手都在用的技巧揭秘")]),_:1})]),n("li",null,[s(e,{to:"/software/middleware/mysql/MySQL%E4%B8%89%E5%A4%A7%E6%97%A5%E5%BF%97.html"},{default:l(()=>[a("MySQL三大日志")]),_:1})]),n("li",null,[s(e,{to:"/other/vuepress/vuepress-theme-hope%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97.html"},{default:l(()=>[a("vuepress-theme-hope使用心得")]),_:1})])]),x,A,B,w])}const F=p(d,[["render",D],["__file","乱七八糟的笔记.html.vue"]]);export{F as default};
