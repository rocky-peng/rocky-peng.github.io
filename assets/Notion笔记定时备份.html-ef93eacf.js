import{_ as l,$ as d,a0 as h,a1 as e,a2 as a,a3 as t,a4 as o,a5 as s,w as r}from"./framework-8c4427da.js";const c="/assets/431974973335700-802dc2ee.png",p="/assets/432626452724700-6cf40815.png",u="/assets/432630809150500-738962c1.png",f="/assets/432770360556700-53975437.png",_="/assets/432832006568400-bd5facd8.png",g="/assets/432956352937000-aa634929.png",E="/assets/433052161706700-adfd3510.png",m="/assets/433237435722500-7630af31.png",B="/assets/431654460959200-9e29d415.png",b="/assets/433658683222900-eb6e61c3.png",k={},A=s('<h2 id="先说原理" tabindex="-1"><a class="header-anchor" href="#先说原理" aria-hidden="true">#</a> 先说原理</h2><p>原理就是，模拟notion的&quot;export all workspace content&quot;按钮的请求，得到notion返回的zip压缩包。</p><p>拿到zip压缩包后怎么处理，就看各自的需求了。</p><p>我这里拿到zip压缩包后的操作是：自动解压并推送到github的私有仓库中</p><h2 id="具体步骤" tabindex="-1"><a class="header-anchor" href="#具体步骤" aria-hidden="true">#</a> 具体步骤</h2><h3 id="一、创建或准备自己的私有仓库" tabindex="-1"><a class="header-anchor" href="#一、创建或准备自己的私有仓库" aria-hidden="true">#</a> 一、创建或准备自己的私有仓库</h3><p>可以是新建的私有仓库，也可以是已有仓库，但无论新建还是已有，都不能是空仓库，哪怕随便提交一个文件都可以。然后分支名要命名为main</p><p>我这里是创建的新仓库，仓库名就是： my-notion-backup （可以不一样，根据自身情况定义即可）</p><h3 id="二、fork仓库" tabindex="-1"><a class="header-anchor" href="#二、fork仓库" aria-hidden="true">#</a> 二、fork仓库</h3><p>这个仓库的作用就是完成上面说的工作：定时模拟notion导出请求，解压，推送</p>',10),x={href:"https://github.com/richartkeil/notion-guardian",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/rocky-peng/Keenster-notion-guardian",target:"_blank",rel:"noopener noreferrer"},y=e("h3",{id:"三、准备以下参数",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#三、准备以下参数","aria-hidden":"true"},"#"),a(" 三、准备以下参数")],-1),N=e("h4",{id:"repo-username",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#repo-username","aria-hidden":"true"},"#"),a(" REPO_USERNAME")],-1),C=e("p",null,"这个参数就是自己github的用户名，就是步骤二中自己fork的仓库地址中用户名那一节。",-1),I={href:"https://github.com/rocky-peng/Keenster-notion-guardian%EF%BC%8C%E9%82%A3rocky-peng%E5%B0%B1%E6%98%AFREPO_USERNAME",target:"_blank",rel:"noopener noreferrer"},O=e("h4",{id:"repo-personal-access-token",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#repo-personal-access-token","aria-hidden":"true"},"#"),a(" REPO_PERSONAL_ACCESS_TOKEN")],-1),D={href:"https://github.com/settings/tokens/new",target:"_blank",rel:"noopener noreferrer"},z=e("img",{src:c,alt:"",loading:"lazy"},null,-1),F=s('<h4 id="repo-name" tabindex="-1"><a class="header-anchor" href="#repo-name" aria-hidden="true">#</a> REPO_NAME</h4><p>这个参数就是步骤一中自己的私有仓库名字，我这里就是： my-notion-backup</p><h4 id="repo-email" tabindex="-1"><a class="header-anchor" href="#repo-email" aria-hidden="true">#</a> REPO_EMAIL</h4><p>这个参数一般配置为自己的邮箱，用于定义推送到私有仓库的用户。自己常用的邮箱即可</p><h4 id="notion-space-id" tabindex="-1"><a class="header-anchor" href="#notion-space-id" aria-hidden="true">#</a> NOTION_SPACE_ID</h4><p>进入自己的notion。看下图：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图中缺失的3：</p><p>浏览器右键并点击&quot;检查&quot;</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后找到network或者网络，如下：</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时步骤3完成，可以继续步骤4</p><p>然后会出现弹框，如下：</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>继续点击红框按钮</p><p>然后此时在network或者网络下方找到下面的请求：</p><figure><img src="'+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>右下角的spaceId，就是我们要找的值，记录下来</p><h4 id="notion-token" tabindex="-1"><a class="header-anchor" href="#notion-token" aria-hidden="true">#</a> NOTION_TOKEN</h4><p><img src="'+m+'" alt="" loading="lazy"> 红框中 token_v2的值就是了，记录下来</p><h4 id="notion-user-id" tabindex="-1"><a class="header-anchor" href="#notion-user-id" aria-hidden="true">#</a> NOTION_USER_ID</h4><p>上图中红框中 notion_user_id 的值就是了，记录下来</p><h3 id="四、配置刚刚fork的仓库" tabindex="-1"><a class="header-anchor" href="#四、配置刚刚fork的仓库" aria-hidden="true">#</a> 四、配置刚刚fork的仓库</h3><h4 id="配置参数" tabindex="-1"><a class="header-anchor" href="#配置参数" aria-hidden="true">#</a> 配置参数</h4><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>按照上图的操作，依次创建上面的准备的参数，最后类似上图上图</p><h4 id="开启workflow" tabindex="-1"><a class="header-anchor" href="#开启workflow" aria-hidden="true">#</a> 开启workflow</h4><p>单击fork仓库上的“Actions”选项卡，然后单击启用按钮。</p><p>在左侧边栏上单击“Backup Notion Workspace”工作流程。通知将告诉您“计划的操作”已禁用，因此请继续并单击按钮以启用它们。</p><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>此时任意往fork的仓库中提交一点东西，就会触发actions动作</p><p>等待一会，刷新自己的私有仓库，看看是否有文件生成，类似如下：</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="修改定时备份频率" tabindex="-1"><a class="header-anchor" href="#修改定时备份频率" aria-hidden="true">#</a> 修改定时备份频率</h2><p>fork仓库默认是每天0点0分备份一次。可以通过修改工作流配置文件修改备份频率。一般一天一次足够</p><br><h2 id="系统推荐" tabindex="-1"><a class="header-anchor" href="#系统推荐" aria-hidden="true">#</a> 系统推荐</h2>',39),R=e("p",null,[e("br"),e("br"),e("br"),e("br"),e("br"),e("br")],-1),M=e("hr",null,null,-1),P=e("hr",null,null,-1),S=e("ul",null,[e("li",null,[e("strong",null,"随机毒鸡汤"),a("：好恶心的淘宝，动不动在这里猜我喜欢，我TM果然都很喜欢。 "),e("br"),e("br"),e("img",{src:"https://images.pexels.com/photos/9850091/pexels-photo-9850091.jpeg?auto=compress&cs=tinysrgb&h=650&w=940",alt:"A needle cushion with various pins and needles in a sewing workshop setting.",loading:"lazy"})])],-1);function V(v,T){const i=r("ExternalLinkIcon"),n=r("RouterLink");return d(),h("div",null,[A,e("p",null,[a("仓库地址："),e("a",x,[a("https://github.com/richartkeil/notion-guardian"),t(i)])]),e("p",null,[a("也可以fork楼主的仓库："),e("a",w,[a("https://github.com/rocky-peng/Keenster-notion-guardian"),t(i)]),a(" （修改了中文时区并默认为子页面创建文件夹，方便管理）")]),y,N,C,e("p",null,[a("比如我的仓库地址："),e("a",I,[a("https://github.com/rocky-peng/Keenster-notion-guardian，那rocky-peng就是REPO_USERNAME"),t(i)])]),O,e("p",null,[a("这个参数在自己的github上创建，这里提供一个便捷链接： "),e("a",D,[a("https://github.com/settings/tokens/new"),t(i)]),z]),F,e("ul",null,[e("li",null,[t(n,{to:"/other/%E6%9D%A5%E4%B8%AAJVM%E5%86%B7%E7%9F%A5%E8%AF%86.html"},{default:o(()=>[a("来个JVM冷知识")]),_:1})]),e("li",null,[t(n,{to:"/software/docker/Docker%E8%BF%9B%E8%A1%8C%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB.html"},{default:o(()=>[a("Docker进行资源隔离")]),_:1})]),e("li",null,[t(n,{to:"/software/jvm/JVM%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE.html"},{default:o(()=>[a("JVM参数设置")]),_:1})]),e("li",null,[t(n,{to:"/other/%E6%95%B0%E7%BB%84%E8%BD%AC%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E5%8F%AA%E9%9C%80%E4%B8%A4%E6%AD%A5.html"},{default:o(()=>[a("数组转树形结构只需两步")]),_:1})]),e("li",null,[t(n,{to:"/software/java-basic/IO%E7%9B%B8%E5%85%B3.html"},{default:o(()=>[a("IO相关")]),_:1})]),e("li",null,[t(n,{to:"/software/unclassified/PasteImageIntoMarkdown%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91.html"},{default:o(()=>[a("PasteImageIntoMarkdown插件开发")]),_:1})]),e("li",null,[t(n,{to:"/software/middleware/mysql/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.html"},{default:o(()=>[a("InnoDB存储引擎")]),_:1})]),e("li",null,[t(n,{to:"/software/unclassified/index%E6%96%B9%E6%B3%95%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95.html"},{default:o(()=>[a("index方法压力测试记录")]),_:1})]),e("li",null,[t(n,{to:"/software/middleware/mysql/%E5%BC%82%E5%9C%B0%E5%A4%9A%E6%B4%BB.html"},{default:o(()=>[a("异地多活")]),_:1})]),e("li",null,[t(n,{to:"/intro.html"},{default:o(()=>[a("intro")]),_:1})]),e("li",null,[t(n,{to:"/software/docker/Docker%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1%E6%96%B9%E6%A1%88.html"},{default:o(()=>[a("Docker跨主机通信方案")]),_:1})]),e("li",null,[t(n,{to:"/other/%E9%9A%8F%E6%9C%BA%E5%9B%BE%E7%89%87%E5%9C%A8%E7%BA%BF%E6%8E%A5%E5%8F%A3.html"},{default:o(()=>[a("随机图片在线接口")]),_:1})])]),R,M,P,S])}const K=l(k,[["render",V],["__file","Notion笔记定时备份.html.vue"]]);export{K as default};
