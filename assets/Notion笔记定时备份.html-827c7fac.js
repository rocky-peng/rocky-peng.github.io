import{_ as t,$ as o,a0 as s,a1 as a,a2 as e,a4 as r,a3 as i,w as d}from"./framework-d4d2d777.js";const p="/assets/431974973335700-802dc2ee.png",c="/assets/432626452724700-6cf40815.png",h="/assets/432630809150500-738962c1.png",l="/assets/432770360556700-53975437.png",g="/assets/432832006568400-bd5facd8.png",f="/assets/432956352937000-aa634929.png",_="/assets/433052161706700-adfd3510.png",u="/assets/433237435722500-7630af31.png",b="/assets/431654460959200-9e29d415.png",m="/assets/433658683222900-eb6e61c3.png",k={},x=i('<h2 id="先说原理" tabindex="-1"><a class="header-anchor" href="#先说原理" aria-hidden="true">#</a> 先说原理</h2><p>原理就是，模拟notion的&quot;export all workspace content&quot;按钮的请求，得到notion返回的zip压缩包。</p><p>拿到zip压缩包后怎么处理，就看各自的需求了。</p><p>我这里拿到zip压缩包后的操作是：自动解压并推送到github的私有仓库中</p><h2 id="具体步骤" tabindex="-1"><a class="header-anchor" href="#具体步骤" aria-hidden="true">#</a> 具体步骤</h2><h3 id="一、创建或准备自己的私有仓库" tabindex="-1"><a class="header-anchor" href="#一、创建或准备自己的私有仓库" aria-hidden="true">#</a> 一、创建或准备自己的私有仓库</h3><p>可以是新建的私有仓库，也可以是已有仓库，但无论新建还是已有，都不能是空仓库，哪怕随便提交一个文件都可以。然后分支名要命名为main</p><p>我这里是创建的新仓库，仓库名就是： my-notion-backup （可以不一样，根据自身情况定义即可）</p><h3 id="二、fork仓库" tabindex="-1"><a class="header-anchor" href="#二、fork仓库" aria-hidden="true">#</a> 二、fork仓库</h3><p>这个仓库的作用就是完成上面说的工作：定时模拟notion导出请求，解压，推送</p>',10),E={href:"https://github.com/richartkeil/notion-guardian",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/rocky-peng/Keenster-notion-guardian",target:"_blank",rel:"noopener noreferrer"},y=a("h3",{id:"三、准备以下参数",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#三、准备以下参数","aria-hidden":"true"},"#"),e(" 三、准备以下参数")],-1),z=a("h4",{id:"repo-username",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#repo-username","aria-hidden":"true"},"#"),e(" REPO_USERNAME")],-1),O=a("p",null,"这个参数就是自己github的用户名，就是步骤二中自己fork的仓库地址中用户名那一节。",-1),w={href:"https://github.com/rocky-peng/Keenster-notion-guardian%EF%BC%8C%E9%82%A3rocky-peng%E5%B0%B1%E6%98%AFREPO_USERNAME",target:"_blank",rel:"noopener noreferrer"},A=a("h4",{id:"repo-personal-access-token",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#repo-personal-access-token","aria-hidden":"true"},"#"),e(" REPO_PERSONAL_ACCESS_TOKEN")],-1),R={href:"https://github.com/settings/tokens/new",target:"_blank",rel:"noopener noreferrer"},I=a("img",{src:p,alt:"",loading:"lazy"},null,-1),S=i('<h4 id="repo-name" tabindex="-1"><a class="header-anchor" href="#repo-name" aria-hidden="true">#</a> REPO_NAME</h4><p>这个参数就是步骤一中自己的私有仓库名字，我这里就是： my-notion-backup</p><h4 id="repo-email" tabindex="-1"><a class="header-anchor" href="#repo-email" aria-hidden="true">#</a> REPO_EMAIL</h4><p>这个参数一般配置为自己的邮箱，用于定义推送到私有仓库的用户。自己常用的邮箱即可</p><h4 id="notion-space-id" tabindex="-1"><a class="header-anchor" href="#notion-space-id" aria-hidden="true">#</a> NOTION_SPACE_ID</h4><p>进入自己的notion。看下图：</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图中缺失的3：</p><p>浏览器右键并点击&quot;检查&quot;</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后找到network或者网络，如下：</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时步骤3完成，可以继续步骤4</p><p>然后会出现弹框，如下：</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>继续点击红框按钮</p><p>然后此时在network或者网络下方找到下面的请求：</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>右下角的spaceId，就是我们要找的值，记录下来</p><h4 id="notion-token" tabindex="-1"><a class="header-anchor" href="#notion-token" aria-hidden="true">#</a> NOTION_TOKEN</h4><p><img src="'+u+'" alt="" loading="lazy"> 红框中 token_v2的值就是了，记录下来</p><h4 id="notion-user-id" tabindex="-1"><a class="header-anchor" href="#notion-user-id" aria-hidden="true">#</a> NOTION_USER_ID</h4><p>上图中红框中 notion_user_id 的值就是了，记录下来</p><h3 id="四、配置刚刚fork的仓库" tabindex="-1"><a class="header-anchor" href="#四、配置刚刚fork的仓库" aria-hidden="true">#</a> 四、配置刚刚fork的仓库</h3><h4 id="配置参数" tabindex="-1"><a class="header-anchor" href="#配置参数" aria-hidden="true">#</a> 配置参数</h4><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>按照上图的操作，依次创建上面的准备的参数，最后类似上图上图</p><h4 id="开启workflow" tabindex="-1"><a class="header-anchor" href="#开启workflow" aria-hidden="true">#</a> 开启workflow</h4><p>单击fork仓库上的“Actions”选项卡，然后单击启用按钮。</p><p>在左侧边栏上单击“Backup Notion Workspace”工作流程。通知将告诉您“计划的操作”已禁用，因此请继续并单击按钮以启用它们。</p><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>此时任意往fork的仓库中提交一点东西，就会触发actions动作</p><p>等待一会，刷新自己的私有仓库，看看是否有文件生成，类似如下：</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="修改定时备份频率" tabindex="-1"><a class="header-anchor" href="#修改定时备份频率" aria-hidden="true">#</a> 修改定时备份频率</h2><p>fork仓库默认是每天0点0分备份一次。可以通过修改工作流配置文件修改备份频率。一般一天一次足够</p><p><br><br><br><br><br><br></p><hr><hr><ul><li><strong>随机毒鸡汤</strong>：钥匙圈是非常实用的小工具，它可以让你，一次把所有钥匙都丢光。 <br><br><img src="https://api.btstu.cn/sjbz/?lx=dongman&amp;uuid=a64c290d-263a-4bbd-9d18-d89a7959f77a" alt="" loading="lazy"></li></ul>',41);function P(B,C){const n=d("ExternalLinkIcon");return o(),s("div",null,[x,a("p",null,[e("仓库地址："),a("a",E,[e("https://github.com/richartkeil/notion-guardian"),r(n)])]),a("p",null,[e("也可以fork楼主的仓库："),a("a",N,[e("https://github.com/rocky-peng/Keenster-notion-guardian"),r(n)]),e(" （修改了中文时区并默认为子页面创建文件夹，方便管理）")]),y,z,O,a("p",null,[e("比如我的仓库地址："),a("a",w,[e("https://github.com/rocky-peng/Keenster-notion-guardian，那rocky-peng就是REPO_USERNAME"),r(n)])]),A,a("p",null,[e("这个参数在自己的github上创建，这里提供一个便捷链接： "),a("a",R,[e("https://github.com/settings/tokens/new"),r(n)]),I]),S])}const T=t(k,[["render",P],["__file","Notion笔记定时备份.html.vue"]]);export{T as default};
