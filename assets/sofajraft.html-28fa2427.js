import{_ as a,$ as t,a0 as r,a2 as l,a4 as o,a1 as e}from"./framework-294a1fec.js";const p={},s=o("<p>是java语音针对raft协议的实现</p><p>解决的问题：</p><ol><li><p>集群状态下的共识问题</p></li><li><p>leader的选举问题</p></li><li><p>同一时刻，最多只有一个leader，leader来负责处理读写请求</p></li><li><p>cap理论中，raft满足的是cp，也就是一致性和容忍性，在leader选举过程中，整个集群是不可用状态</p></li><li><p>leader接收到请求后，先进行WAL（Write Ahead Log），并等待多数节点完成日志的同步后，才会执行状态机的apply操作</p></li></ol><p>Status 状态，封装了任务的执行结果 Closure 回调接口，引用Status， Task</p><ol><li>任务的数据</li><li>期望的leader id</li><li>回调接口 Closure ,在成功或失败的时候调用</li></ol><p>StateMachine</p><ol><li>业务逻辑关键方法 onApply ,输入批量的task，业务处理task</li></ol><p>NodeOptions raft节点的配置信息，里面就引用了StateMachine实例，以及其他的一些配置 比如：快照间隔时间、快照存储路径、日志保存路径、元信息存储路径等</p><p>Node: 代表一个raft节点，可以apply task(提交task)，可以创建快照 snapshot 可用RaftServiceFactory创建一个node 正常情况都应该至少创建3个node node之前通过bolt框架通信</p><p>RpcServer: 和node的关系是什么? node和rpcserver之间是如何关联的？</p><br>",11),i=e("p",null,[e("br"),e("br"),e("br"),e("br"),e("br"),e("br")],-1),d=e("hr",null,null,-1),n=e("hr",null,null,-1),c=e("ul",null,[e("li",null,[e("strong",null,"随机毒鸡汤"),l("：死而无憾的意思是，我死了，无人觉得遗憾。 "),e("br"),e("br"),e("img",{src:"https://tuapi.eees.cc/api.php?category=fengjing&type=302&uuid=e7cd10ac-0110-4c24-b75f-25fd45733551",alt:"",loading:"lazy"})])],-1);function u(h,_){return t(),r("div",null,[s,l(" ## 系统推荐 - [MAT工具](../unclassified/MAT工具.md) - [常见问题](../spring/常见问题.md) - [Git合并多个提交并push到远程仓库](../../other/Git合并多个提交并push到远程仓库.md) - [MongoDB高可用](../../other/MongoDB高可用.md) - [Markdown Mermaid画图实例](../unclassified/Markdown Mermaid画图实例.md) - [MySQL三大日志](../middleware/mysql/MySQL三大日志.md) - [Docker跨主机通信方案](../docker/Docker跨主机通信方案.md) - [vuepress-theme-hope 添加谷歌广告](../../other/vuepress-theme-hope 添加谷歌广告.md) "),i,d,n,c])}const m=a(p,[["render",u],["__file","sofajraft.html.vue"]]);export{m as default};
