import{_ as r,$ as n,a0 as i,a1 as t,a3 as o,a4 as a,a5 as s,a2 as l,w as d}from"./framework-16d560c6.js";const h={},u=s('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>问题一： 比如现在k8s有个deployment，有3个pod。此时有个请求在pod A中进行处理，假设需要耗时5分钟。在这个5分钟内，执行了k8s的滚动发布，并开始销毁这个pod。 这个场景下，如果不做一些额外配置，那么pod A的这个请求应该会处理异常。</p><p>问题二： 滚动发布的时候，k8s刚启动了一个pod，但这个pod可能需要等一段时间才能真正对外提供服务。但k8s此时开始转发请求到这个pod了，这种情况下，请求是不能成功处理的</p><p>核心问题：</p><ol><li>k8s如何知道pod可以对外提供服务了</li><li>pod如何知道k8s要销毁这个pod了，pod里的应用程序知道后就能自己进行shutdown</li></ol><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><p>其实主要利用k8s pod的两个东西：</p><ol><li>就绪探针</li><li>preStop</li></ol><p>如果pod中运行的是spring boot项目，那么就可以结合spring-actuator来完成。</p><ul><li>就绪探针就配置 /actuator/health，或者自定义一个url</li><li>preStop就配置/actuator/shutdown</li></ul><br><h2 id="系统推荐" tabindex="-1"><a class="header-anchor" href="#系统推荐" aria-hidden="true">#</a> 系统推荐</h2>',12),E=t("p",null,[t("br"),t("br"),t("br"),t("br"),t("br"),t("br")],-1),p=t("hr",null,null,-1),c=t("hr",null,null,-1),_=t("ul",null,[t("li",null,[t("strong",null,"随机毒鸡汤"),l("：人不能低下高贵的头，但捡钱时例外。 "),t("br"),t("br"),t("img",{src:"https://tuapi.eees.cc/api.php?category=fengjing&type=302&uuid=fdf4a14c-3a28-4cdd-b402-3ec5600f1660",alt:"",loading:"lazy"})])],-1);function f(B,A){const e=d("RouterLink");return n(),i("div",null,[u,t("ul",null,[t("li",null,[o(e,{to:"/other/getPath%20vs%20getAbsolutePath%20vs%20getCanonicalPath.html"},{default:a(()=>[l("getPath vs getAbsolutePath vs getCanonicalPath")]),_:1})]),t("li",null,[o(e,{to:"/software/jvm/JVM%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE.html"},{default:a(()=>[l("JVM参数设置")]),_:1})]),t("li",null,[o(e,{to:"/software/spring/Spring%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%85%B3%E9%94%AE%E7%82%B9.html"},{default:a(()=>[l("Spring框架源码关键点")]),_:1})]),t("li",null,[o(e,{to:"/other/%E9%9A%8F%E8%AE%B0.html"},{default:a(()=>[l("随记")]),_:1})]),t("li",null,[o(e,{to:"/other/MongoDB%E9%AB%98%E5%8F%AF%E7%94%A8.html"},{default:a(()=>[l("MongoDB高可用")]),_:1})]),t("li",null,[o(e,{to:"/other/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E6%8B%BC%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%90%97%EF%BC%9F.html"},{default:a(()=>[l("你真的会拼接字符串吗？")]),_:1})]),t("li",null,[o(e,{to:"/software/shodowsocks/ShadowsockServer.html"},{default:a(()=>[l("ShadowsockServer")]),_:1})]),t("li",null,[o(e,{to:"/other/Hadoop%20%E4%B8%80.html"},{default:a(()=>[l("Hadoop 一")]),_:1})]),t("li",null,[o(e,{to:"/software/unclassified/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9git%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E4%B8%AD%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1.html"},{default:a(()=>[l("批量修改git历史记录中的用户名和邮箱")]),_:1})]),t("li",null,[o(e,{to:"/software/unclassified/gperftools.html"},{default:a(()=>[l("gperftools")]),_:1})]),t("li",null,[o(e,{to:"/other/Git%20Merge%20%E3%80%81Rebase.html"},{default:a(()=>[l("Git Merge 、Rebase")]),_:1})]),t("li",null,[o(e,{to:"/intro.html"},{default:a(()=>[l("intro")]),_:1})])]),E,p,c,_])}const m=r(h,[["render",f],["__file","K8S 无感发布.html.vue"]]);export{m as default};
