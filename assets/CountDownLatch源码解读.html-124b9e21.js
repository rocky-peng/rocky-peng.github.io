const t=JSON.parse('{"key":"v-aa3ac052","path":"/software/java-basic/CountDownLatch%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB.html","title":"CountDownLatch源码解读","lang":"zh-CN","frontmatter":{"title":"CountDownLatch源码解读","date":"2017-03-05T00:00:00.000Z","description":"使用场景 一句话总结：一个或多个线程，等待其他多个线程执行完毕后才继续执行。 具体场景： 某个线程等待其他多个线程执行完毕才能继续执行。就好比一个公交车，司机师傅需要等到所有人都上车后才能启动起步。 发令枪：就是多个线程等待某个线程执行完毕才能继续执行。 死锁检测：一个非常方便的使用场景是，你可以使用 n 个线程访问共享资源，在每次测试阶段的线程数目是不同的，并尝试产生死锁。（这个没有理解到） 实现原理 分析代码前，建议我们我们先自己根据对AQS的理解和对CountDownLatch的使用创建， 先尝试猜测一下其内部是如何实现的。","head":[["link",{"rel":"canonical","href":"https://justsoso.fun/software/java-basic/CountDownLatch%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB.html"}],["meta",{"property":"og:url","content":"https://justsoso.fun/software/java-basic/CountDownLatch%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB.html"}],["meta",{"property":"og:site_name","content":"技术加油站"}],["meta",{"property":"og:title","content":"CountDownLatch源码解读"}],["meta",{"property":"og:description","content":"使用场景 一句话总结：一个或多个线程，等待其他多个线程执行完毕后才继续执行。 具体场景： 某个线程等待其他多个线程执行完毕才能继续执行。就好比一个公交车，司机师傅需要等到所有人都上车后才能启动起步。 发令枪：就是多个线程等待某个线程执行完毕才能继续执行。 死锁检测：一个非常方便的使用场景是，你可以使用 n 个线程访问共享资源，在每次测试阶段的线程数目是不同的，并尝试产生死锁。（这个没有理解到） 实现原理 分析代码前，建议我们我们先自己根据对AQS的理解和对CountDownLatch的使用创建， 先尝试猜测一下其内部是如何实现的。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-30T15:21:57.000Z"}],["meta",{"property":"article:published_time","content":"2017-03-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-30T15:21:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CountDownLatch源码解读\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2017-03-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-30T15:21:57.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"实现原理","slug":"实现原理","link":"#实现原理","children":[{"level":3,"title":"Sync类","slug":"sync类","link":"#sync类","children":[]},{"level":3,"title":"CountDownLatch类","slug":"countdownlatch类","link":"#countdownlatch类","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"扩展","slug":"扩展","link":"#扩展","children":[{"level":3,"title":"CountDownLatch 相常见面试题：","slug":"countdownlatch-相常见面试题","link":"#countdownlatch-相常见面试题","children":[]}]},{"level":2,"title":"系统推荐","slug":"系统推荐","link":"#系统推荐","children":[]}],"git":{"createdTime":1671976155000,"updatedTime":1746026517000,"contributors":[{"name":"rocky-peng","email":"rocky.peng@qq.com","commits":658},{"name":"rocky.peng","email":"rocky.peng@qq.com","commits":22}]},"readingTime":{"minutes":3.41,"words":1022},"filePathRelative":"software/java-basic/CountDownLatch源码解读.md","localizedDate":"2017年3月5日","excerpt":"<h2> 使用场景</h2>\\n<p>一句话总结：一个或多个线程，等待其他多个线程执行完毕后才继续执行。</p>\\n<p>具体场景：</p>\\n<ol>\\n<li>某个线程等待其他多个线程执行完毕才能继续执行。就好比一个公交车，司机师傅需要等到所有人都上车后才能启动起步。</li>\\n<li>发令枪：就是多个线程等待某个线程执行完毕才能继续执行。</li>\\n<li>死锁检测：一个非常方便的使用场景是，你可以使用 n 个线程访问共享资源，在每次测试阶段的线程数目是不同的，并尝试产生死锁。（这个没有理解到）</li>\\n</ol>\\n<h2> 实现原理</h2>\\n<p>分析代码前，建议我们我们先自己根据对AQS的理解和对CountDownLatch的使用创建，\\n先尝试猜测一下其内部是如何实现的。</p>","copyright":{},"autoDesc":true}');export{t as data};
