import{_ as l,$ as d,a0 as h,a1 as e,a2 as a,a3 as t,a4 as i,a5 as s,w as r}from"./framework-b3a0f150.js";const c="/assets/431974973335700-802dc2ee.png",p="/assets/432626452724700-6cf40815.png",u="/assets/432630809150500-738962c1.png",E="/assets/432770360556700-53975437.png",f="/assets/432832006568400-bd5facd8.png",_="/assets/432956352937000-aa634929.png",g="/assets/433052161706700-adfd3510.png",m="/assets/433237435722500-7630af31.png",A="/assets/431654460959200-9e29d415.png",b="/assets/433658683222900-eb6e61c3.png",k={},B=s('<h2 id="先说原理" tabindex="-1"><a class="header-anchor" href="#先说原理" aria-hidden="true">#</a> 先说原理</h2><p>原理就是，模拟notion的&quot;export all workspace content&quot;按钮的请求，得到notion返回的zip压缩包。</p><p>拿到zip压缩包后怎么处理，就看各自的需求了。</p><p>我这里拿到zip压缩包后的操作是：自动解压并推送到github的私有仓库中</p><h2 id="具体步骤" tabindex="-1"><a class="header-anchor" href="#具体步骤" aria-hidden="true">#</a> 具体步骤</h2><h3 id="一、创建或准备自己的私有仓库" tabindex="-1"><a class="header-anchor" href="#一、创建或准备自己的私有仓库" aria-hidden="true">#</a> 一、创建或准备自己的私有仓库</h3><p>可以是新建的私有仓库，也可以是已有仓库，但无论新建还是已有，都不能是空仓库，哪怕随便提交一个文件都可以。然后分支名要命名为main</p><p>我这里是创建的新仓库，仓库名就是： my-notion-backup （可以不一样，根据自身情况定义即可）</p><h3 id="二、fork仓库" tabindex="-1"><a class="header-anchor" href="#二、fork仓库" aria-hidden="true">#</a> 二、fork仓库</h3><p>这个仓库的作用就是完成上面说的工作：定时模拟notion导出请求，解压，推送</p>',10),x={href:"https://github.com/richartkeil/notion-guardian",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/rocky-peng/Keenster-notion-guardian",target:"_blank",rel:"noopener noreferrer"},w=e("h3",{id:"三、准备以下参数",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#三、准备以下参数","aria-hidden":"true"},"#"),a(" 三、准备以下参数")],-1),F=e("h4",{id:"repo-username",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#repo-username","aria-hidden":"true"},"#"),a(" REPO_USERNAME")],-1),y=e("p",null,"这个参数就是自己github的用户名，就是步骤二中自己fork的仓库地址中用户名那一节。",-1),D={href:"https://github.com/rocky-peng/Keenster-notion-guardian%EF%BC%8C%E9%82%A3rocky-peng%E5%B0%B1%E6%98%AFREPO_USERNAME",target:"_blank",rel:"noopener noreferrer"},O=e("h4",{id:"repo-personal-access-token",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#repo-personal-access-token","aria-hidden":"true"},"#"),a(" REPO_PERSONAL_ACCESS_TOKEN")],-1),R={href:"https://github.com/settings/tokens/new",target:"_blank",rel:"noopener noreferrer"},C=e("img",{src:c,alt:"",loading:"lazy"},null,-1),I=s('<h4 id="repo-name" tabindex="-1"><a class="header-anchor" href="#repo-name" aria-hidden="true">#</a> REPO_NAME</h4><p>这个参数就是步骤一中自己的私有仓库名字，我这里就是： my-notion-backup</p><h4 id="repo-email" tabindex="-1"><a class="header-anchor" href="#repo-email" aria-hidden="true">#</a> REPO_EMAIL</h4><p>这个参数一般配置为自己的邮箱，用于定义推送到私有仓库的用户。自己常用的邮箱即可</p><h4 id="notion-space-id" tabindex="-1"><a class="header-anchor" href="#notion-space-id" aria-hidden="true">#</a> NOTION_SPACE_ID</h4><p>进入自己的notion。看下图：</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图中缺失的3：</p><p>浏览器右键并点击&quot;检查&quot;</p><figure><img src="'+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后找到network或者网络，如下：</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时步骤3完成，可以继续步骤4</p><p>然后会出现弹框，如下：</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>继续点击红框按钮</p><p>然后此时在network或者网络下方找到下面的请求：</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>右下角的spaceId，就是我们要找的值，记录下来</p><h4 id="notion-token" tabindex="-1"><a class="header-anchor" href="#notion-token" aria-hidden="true">#</a> NOTION_TOKEN</h4><p><img src="'+m+'" alt="" loading="lazy"> 红框中 token_v2的值就是了，记录下来</p><h4 id="notion-user-id" tabindex="-1"><a class="header-anchor" href="#notion-user-id" aria-hidden="true">#</a> NOTION_USER_ID</h4><p>上图中红框中 notion_user_id 的值就是了，记录下来</p><h3 id="四、配置刚刚fork的仓库" tabindex="-1"><a class="header-anchor" href="#四、配置刚刚fork的仓库" aria-hidden="true">#</a> 四、配置刚刚fork的仓库</h3><h4 id="配置参数" tabindex="-1"><a class="header-anchor" href="#配置参数" aria-hidden="true">#</a> 配置参数</h4><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>按照上图的操作，依次创建上面的准备的参数，最后类似上图上图</p><h4 id="开启workflow" tabindex="-1"><a class="header-anchor" href="#开启workflow" aria-hidden="true">#</a> 开启workflow</h4><p>单击fork仓库上的“Actions”选项卡，然后单击启用按钮。</p><p>在左侧边栏上单击“Backup Notion Workspace”工作流程。通知将告诉您“计划的操作”已禁用，因此请继续并单击按钮以启用它们。</p><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>此时任意往fork的仓库中提交一点东西，就会触发actions动作</p><p>等待一会，刷新自己的私有仓库，看看是否有文件生成，类似如下：</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="修改定时备份频率" tabindex="-1"><a class="header-anchor" href="#修改定时备份频率" aria-hidden="true">#</a> 修改定时备份频率</h2><p>fork仓库默认是每天0点0分备份一次。可以通过修改工作流配置文件修改备份频率。一般一天一次足够</p><br><h2 id="系统推荐" tabindex="-1"><a class="header-anchor" href="#系统推荐" aria-hidden="true">#</a> 系统推荐</h2>',39),S=e("p",null,[e("br"),e("br"),e("br"),e("br"),e("br"),e("br")],-1),z=e("hr",null,null,-1),P=e("hr",null,null,-1),M=e("ul",null,[e("li",null,[e("strong",null,"随机毒鸡汤"),a("：明知山有虎，那就不要去明知山！ "),e("br"),e("br"),e("img",{src:"https://tuapi.eees.cc/api.php?category=biying&type=302&uuid=d10ab12a-cfcc-487d-924c-3819702df085",alt:"",loading:"lazy"})])],-1);function L(v,K){const o=r("ExternalLinkIcon"),n=r("RouterLink");return d(),h("div",null,[B,e("p",null,[a("仓库地址："),e("a",x,[a("https://github.com/richartkeil/notion-guardian"),t(o)])]),e("p",null,[a("也可以fork楼主的仓库："),e("a",N,[a("https://github.com/rocky-peng/Keenster-notion-guardian"),t(o)]),a(" （修改了中文时区并默认为子页面创建文件夹，方便管理）")]),w,F,y,e("p",null,[a("比如我的仓库地址："),e("a",D,[a("https://github.com/rocky-peng/Keenster-notion-guardian，那rocky-peng就是REPO_USERNAME"),t(o)])]),O,e("p",null,[a("这个参数在自己的github上创建，这里提供一个便捷链接： "),e("a",R,[a("https://github.com/settings/tokens/new"),t(o)]),C]),I,e("ul",null,[e("li",null,[t(n,{to:"/software/unclassified/RSA%20%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88.html"},{default:i(()=>[a("RSA 加密解密多语言实现方案")]),_:1})]),e("li",null,[t(n,{to:"/software/unclassified/NGINX.html"},{default:i(()=>[a("NGINX")]),_:1})]),e("li",null,[t(n,{to:"/other/CloudFlare%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%81%E4%B9%A6%E7%9A%84%E4%BD%BF%E7%94%A8.html"},{default:i(()=>[a("CloudFlare 客户端证书的使用")]),_:1})]),e("li",null,[t(n,{to:"/software/unclassified/%E7%BA%BF%E4%B8%8AFullGC%E9%A2%91%E7%B9%81%E7%9A%84%E6%8E%92%E6%9F%A5.html"},{default:i(()=>[a("线上FullGC频繁的排查")]),_:1})]),e("li",null,[t(n,{to:"/software/unclassified/PasteImageIntoMarkdown%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91.html"},{default:i(()=>[a("PasteImageIntoMarkdown插件开发")]),_:1})]),e("li",null,[t(n,{to:"/software/unclassified/%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9git%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E4%B8%AD%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1.html"},{default:i(()=>[a("批量修改git历史记录中的用户名和邮箱")]),_:1})]),e("li",null,[t(n,{to:"/software/unclassified/linux_no_space_left_on_device.html"},{default:i(()=>[a("linux_no_space_left_on_device")]),_:1})]),e("li",null,[t(n,{to:"/software/unclassified/%E7%AE%80%E6%98%93%E7%89%88%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83&%E5%88%9D%E6%8E%A2%E5%8E%9F%E7%90%86.html"},{default:i(()=>[a("简易版配置中心&初探原理")]),_:1})]),e("li",null,[t(n,{to:"/software/jvm/JVM%E6%9D%82%E9%A1%B9.html"},{default:i(()=>[a("JVM杂项")]),_:1})]),e("li",null,[t(n,{to:"/other/Nginx%E7%9A%84%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81%E9%85%8D%E7%BD%AE.html"},{default:i(()=>[a("Nginx的双向认证配置")]),_:1})]),e("li",null,[t(n,{to:"/other/PostgreSQL%20JSON%E7%B1%BB%E5%9E%8B%E5%AD%97%E6%AE%B5%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C.html"},{default:i(()=>[a("PostgreSQL JSON类型字段常用操作")]),_:1})]),e("li",null,[t(n,{to:"/software/unclassified/BBR%E5%8A%A0%E9%80%9F.html"},{default:i(()=>[a("BBR加速")]),_:1})])]),S,z,P,M])}const V=l(k,[["render",L],["__file","Notion笔记定时备份.html.vue"]]);export{V as default};
