import{_ as r,$ as i,a0 as c,a1 as a,a2 as n,a3 as s,a4 as t,a5 as l,w as p}from"./framework-349591b1.js";const d={},u=l(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>k8s环境中有个pod，pod里跑了一个java进程。 采用的是jdk版本是openjdk version &quot;1.8.0_342&quot;。 启动时有这些jvm参数：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token operator">-</span>server 
<span class="token operator">-</span>Dspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>maxActive<span class="token operator">=</span><span class="token number">80</span> 
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span>MaxGCPauseMillis<span class="token operator">=</span><span class="token number">200</span> 
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span>UseG1GC 
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span>UseContainerSupport 
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span>MinRAMPercentage<span class="token operator">=</span><span class="token number">20.0</span> 
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span>MaxRAMPercentage<span class="token operator">=</span><span class="token number">70.0</span> 
<span class="token operator">-</span>Djava<span class="token punctuation">.</span>security<span class="token punctuation">.</span>egd<span class="token operator">=</span>file<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">dev</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token operator">/</span>urandom 
<span class="token operator">-</span>Duser<span class="token punctuation">.</span>timezone<span class="token operator">=</span><span class="token constant">GMT</span><span class="token operator">+</span><span class="token number">08</span> 
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span>HeapDumpOnOutOfMemoryError  
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span>HeapDumpPath<span class="token operator">=</span><span class="token operator">/</span>mnt<span class="token operator">/</span>log 
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span>UnlockExperimentalVMOptions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>depoyment的yaml文件中限制的内存是4g.</p><p>现在发现这个deployment的5个pod内存都占用了90%以上，且<strong>持续不降</strong>，部分pod还重启过3/4次</p><figure><img src="https://cdn.justdopay.top/notion/md5-2d9f65e42e4bb20d061c30e5f8a32e49.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="排查过程" tabindex="-1"><a class="header-anchor" href="#排查过程" aria-hidden="true">#</a> 排查过程</h2><h3 id="怀疑存在内存泄漏或内存溢出" tabindex="-1"><a class="header-anchor" href="#怀疑存在内存泄漏或内存溢出" aria-hidden="true">#</a> 怀疑存在内存泄漏或内存溢出</h3><p>于是进入pod把堆dump下来，下载到本地分析。（由于是客户环境，没有权限直接操作k8s，只能访问dashborad面板，所以下载文件这个过程也是挺折腾的）</p><p>dump下来的堆文件确只有不到2g样子（有点纳闷，但没深究）</p>`,10),m={href:"https://justsoso.fun/software/unclassified/%E7%BA%BF%E4%B8%8AFullGC%E9%A2%91%E7%B9%81%E7%9A%84%E6%8E%92%E6%9F%A5.html",target:"_blank",rel:"noopener noreferrer"},g=l(`<h3 id="查看gc情况" tabindex="-1"><a class="header-anchor" href="#查看gc情况" aria-hidden="true">#</a> 查看gc情况</h3><figure><img src="https://cdn.justdopay.top/notion/md5-8935ab54643f82cb0505547077e94dad.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>可以看到，青年代发生了1.3万次gc，老年代没有发生过gc. (此时离pod启用有9天时间)</p><p>同时也能看到内存分配和使用情况：</p><ol><li>堆内存： 使用了1.6g， committed2.8g内存（可以理解为jvm向操作系统申请了2.8g内存），最大堆内存限制为2.8g. （这个2.8就是deployment的4<em>MaxRAMPercentage参数，也就是4</em>0.7=2.8）</li><li>非堆内存：包括直接内存、metaspace 、code cache 等。 使用了400m不到，committed400m内存。</li></ol><p>然后很好奇的手动执行了一次fullgc，再看jvm情况，如下：</p><figure><img src="https://cdn.justdopay.top/notion/md5-26dd62714972e64dba8cf0387c95262f.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>然后看k8s的dashboard</p><figure><img src="https://cdn.justdopay.top/notion/md5-fa647b017084e3877222a3398a1abb85.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p><strong>注意：因为这篇博文是事后写的，上面的图有些并不是同一个pod的信息，所以有些信息会对不上，但不影响问题分析。</strong></p><p>可以看到堆内存的used和committed下降了，committed下降了大概1.3g样子，刚好就是dashboard上显示的内存差异，非堆内存几乎没有下降。</p><p>执行了fullgc后第二天，bashboard内存占用基本没有变动，没有再升上去</p><p>可以分析得出一个基本结论：</p><ol><li><strong>问题在堆内存，且代码可以基本排除内存泄漏或溢出的问题</strong></li><li><strong>青年代的gc 没有退还内存给操作系统，fullgc后退还了1.3g样子给操作系统</strong></li></ol><p>查资料，尝试增加jvm参数：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span>MaxHeapFreeRatio<span class="token operator">=</span><span class="token number">30</span>
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span>MinHeapFreeRatio<span class="token operator">=</span><span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-XX:MaxHeapFreeRatio=30</code> 最大堆内存空闲比例，大致理解为jvm向操作系统了申请了2g内存，gc后只使用了1g. 那么空闲了1g，空闲比例就是50%，大于了30%，于是就会退还内存给操作系统。</p><p><code>-XX:MinHeapFreeRatio=10</code> 同理，最小堆内存空闲比例，如果gc空闲比例小于了这个值，jvm就会向操作系统申请更多的内存</p><p>后面也尝试增加过其他参数</p><p>观察一段时间后，发现青年代gc后，还是没有减少committed内存。也没有增加老年代的gc次数</p><h2 id="解决" tabindex="-1"><a class="header-anchor" href="#解决" aria-hidden="true">#</a> 解决</h2><p>其实算不上解决，或者解决得不够优雅。考虑到切换jdk版本，或者修改垃圾收集器可能产生意料之外的问题和成本，所以采用：</p><ul><li>周期性触发一次fullgc. 比如通过sidecar，或者linux的crontab或者代码定时任务等。</li></ul><h2 id="后文" tabindex="-1"><a class="header-anchor" href="#后文" aria-hidden="true">#</a> 后文</h2><p>后面再继续查资料，搜到一个类似问题的网址：</p>`,25),h={href:"https://stackoverflow.com/questions/29826465/how-to-reduce-committed-heap-memory-in-jvm",target:"_blank",rel:"noopener noreferrer"},E=a("figure",null,[a("img",{src:"https://cdn.justdopay.top/notion/md5-b021f2838282cc9e3fd9cc6132b09768.png",alt:"image.png",tabindex:"0",loading:"lazy"}),a("figcaption",null,"image.png")],-1),k=a("br",null,null,-1),f=a("h2",{id:"系统推荐",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#系统推荐","aria-hidden":"true"},"#"),n(" 系统推荐")],-1),b=a("p",null,[a("br"),a("br"),a("br"),a("br"),a("br"),a("br")],-1),A=a("hr",null,null,-1),_=a("hr",null,null,-1),v=a("ul",null,[a("li",null,[a("strong",null,"随机毒鸡汤"),n("：不要没完没了的修图，你现实中的丑，我们都知道。 "),a("br"),a("br"),a("img",{src:"https://images.pexels.com/photos/10390896/pexels-photo-10390896.jpeg?auto=compress&cs=tinysrgb&h=650&w=940",alt:"Close-up of a rustic wooden wall featuring white numeric markings on a reddish-brown background.",loading:"lazy"})])],-1);function B(x,y){const o=p("ExternalLinkIcon"),e=p("RouterLink");return i(),c("div",null,[u,a("p",null,[n("采用与博文 "),a("a",m,[n("线上FullGC频繁的排查"),s(o)]),n(" 排查方式分析堆文件，一无所获。")]),g,a("p",null,[a("a",h,[n("how-to-reduce-committed-heap-memory-in-jvm"),s(o)])]),E,k,f,a("ul",null,[a("li",null,[s(e,{to:"/software/unclassified/Cordova+Umi%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4.html"},{default:t(()=>[n("Cordova+Umi项目搭建步骤")]),_:1})]),a("li",null,[s(e,{to:"/software/unclassified/RSA%20%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88.html"},{default:t(()=>[n("RSA 加密解密多语言实现方案")]),_:1})]),a("li",null,[s(e,{to:"/software/unclassified/KVM%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85.html"},{default:t(()=>[n("KVM 虚拟机安装")]),_:1})]),a("li",null,[s(e,{to:"/other/Git%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AA%E6%8F%90%E4%BA%A4%E5%B9%B6push%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.html"},{default:t(()=>[n("Git合并多个提交并push到远程仓库")]),_:1})]),a("li",null,[s(e,{to:"/software/spring/Spring%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%85%B3%E9%94%AE%E7%82%B9.html"},{default:t(()=>[n("Spring框架源码关键点")]),_:1})]),a("li",null,[s(e,{to:"/software/unclassified/NGINX.html"},{default:t(()=>[n("NGINX")]),_:1})]),a("li",null,[s(e,{to:"/other/Censys%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0.html"},{default:t(()=>[n("Censys搜索引擎学习")]),_:1})]),a("li",null,[s(e,{to:"/software/unclassified/%E7%BA%BF%E4%B8%8AFullGC%E9%A2%91%E7%B9%81%E7%9A%84%E6%8E%92%E6%9F%A5.html"},{default:t(()=>[n("线上FullGC频繁的排查")]),_:1})]),a("li",null,[s(e,{to:"/software/middleware/mysql/MySQL%E7%B4%A2%E5%BC%95.html"},{default:t(()=>[n("MySQL索引")]),_:1})]),a("li",null,[s(e,{to:"/software/middleware/mysql/MySQL%E4%B8%89%E5%A4%A7%E6%97%A5%E5%BF%97.html"},{default:t(()=>[n("MySQL三大日志")]),_:1})]),a("li",null,[s(e,{to:"/other/vuepress-theme-hope%20%E6%B7%BB%E5%8A%A0%E8%B0%B7%E6%AD%8C%E5%B9%BF%E5%91%8A.html"},{default:t(()=>[n("vuepress-theme-hope 添加谷歌广告")]),_:1})]),a("li",null,[s(e,{to:"/other/Hbase%20%E6%80%BB%E8%A7%88.html"},{default:t(()=>[n("Hbase 总览")]),_:1})])]),b,A,_,v])}const X=r(d,[["render",B],["__file","JDK8 G1 堆内存居然不释放.html.vue"]]);export{X as default};
