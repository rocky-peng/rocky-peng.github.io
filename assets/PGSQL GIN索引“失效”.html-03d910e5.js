import{_ as p,$ as o,a0 as l,a1 as n,a3 as e,a4 as t,a5 as c,a2 as s,w as i}from"./framework-b3a0f150.js";const u={},r=c(`<h2 id="问题背景" tabindex="-1"><a class="header-anchor" href="#问题背景" aria-hidden="true">#</a> 问题背景</h2><p>现在有一张标签表，主要有两个字段，member_id和tags。如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> user_tags
<span class="token punctuation">(</span>
    id   serial8 <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
    member_id int8 <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>
    tags jsonb
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">create</span> <span class="token keyword">index</span> concurrently <span class="token keyword">on</span> user_tags <span class="token keyword">using</span> gin <span class="token punctuation">(</span>tags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大致有5500多万行数据，每个member_id一行数据。tags字段就存储了这个member的所有标签。</p><p>大致结构如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;19&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;5006268&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;标签ID&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;标签值1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;标签值2&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  	....
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在有个需求需要查询哪些用户被打上了标签A且标签值为固定的某个值，大致的查询语句如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_tags <span class="token keyword">where</span>  tags @<span class="token operator">&gt;</span> <span class="token string">&#39;{&quot;50&quot;:[&quot;5006268&quot;]}&#39;</span><span class="token punctuation">;</span>

表示查询被打上了<span class="token number">50</span>这个标签，且标签值为<span class="token number">5006268</span>的那些用户
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个查询讲道理会走gin索引，同时实际情况也确实走了gin索引，查询基本是秒回。</p><p>然后系统有个定时任务，每天会更新这张表的数据，大致更新过程如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 删除临时表</span>
<span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token string">&quot;user_tags_tmp&quot;</span><span class="token punctuation">;</span>

<span class="token comment">-- 复制现有的表结构</span>
<span class="token keyword">create</span> unlogged <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span>  user_tags_tmp <span class="token punctuation">(</span><span class="token operator">like</span>  user_tags including constraints including indexes including defaults<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">--- 往user_tags_tmp表写数据（本案例中采用的是copy方法写入，每次大致写入5500多万行数据）</span>
<span class="token comment">-- copy user_tags_tmp FROM &#39;data.csv&#39; WITH (FORMAT csv, ESCAPE &#39;\\&quot;&#39;, QUOTE &#39;\\&quot;&#39;, NULL &#39;N/A&#39;)</span>

<span class="token keyword">set</span> statement_timeout<span class="token operator">=</span><span class="token number">15000</span><span class="token punctuation">;</span>
<span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> user_tags_bak<span class="token punctuation">;</span>

<span class="token keyword">begin</span><span class="token punctuation">;</span>
<span class="token comment">-- 重命名现有的表</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> user_tags <span class="token keyword">rename</span> <span class="token keyword">to</span> user_tags_bak<span class="token punctuation">;</span>    <span class="token comment">----A</span>

<span class="token comment">-- 把新的表重命名为正式表</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> user_tags_tmp <span class="token keyword">rename</span> <span class="token keyword">to</span> user_tags<span class="token punctuation">;</span>    <span class="token comment">----B</span>
<span class="token keyword">end</span><span class="token punctuation">;</span>

<span class="token comment">-- 注意：上面两个rename要放在一个事务里，否则并发情况下，A执行完后B执行完前，其他事务对user_tags表就会操作失败。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>终于有一天，上面的查询语句突然变得很慢，导致应用端超时看不到数据</p><p>通过执行explain analyse发现居然没有走索引，这个就有点懵了</p><p><strong>后面同事执行了一下 <code>analyse verbose user_tags;</code> 然后重新执行查询语句的explain analyse，发现开始走索引了，但还是没有恢复到之前的秒回状态。</strong></p><p>后面查资料，当对gin索引进行大量的插入、更新操作时，系统会将这些操作的变化暂时存储在一个叫做 &quot;pending list&quot; 的结构中。这个结构旨在将多次小的索引更新合并成较大的批量更新，以减少磁盘 I/O 的开销。</p><p>为了保证索引能有效，在把数据写入_tmp表后，执行了一下</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> gin_clean_pending_list<span class="token punctuation">(</span><span class="token string">&#39;gin索引名&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个执行后，explain analyse也是走索引，同时执行也恢复到秒回状态</p><p><strong>在这个这个语句的过程中，表的增、删、改、查均不受影响</strong></p><h2 id="实验" tabindex="-1"><a class="header-anchor" href="#实验" aria-hidden="true">#</a> 实验</h2><ol><li><p>先随机生成2000万行数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user_tags <span class="token punctuation">(</span>member_id<span class="token punctuation">,</span>tags<span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> gen_random_uuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>jsonb_build_object<span class="token punctuation">(</span>
               <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> md5<span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>::<span class="token keyword">text</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span>::<span class="token keyword">int</span><span class="token punctuation">,</span>
               <span class="token string">&#39;registered&#39;</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">INTERVAL</span> <span class="token string">&#39;1 day&#39;</span> <span class="token operator">*</span> <span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">800</span><span class="token punctuation">)</span>::<span class="token keyword">int</span>
       <span class="token punctuation">)</span>
<span class="token keyword">FROM</span> generate_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 这个tags字段没有按照上面的格式生成，说明问题就行</span>

<span class="token comment">-- 这个sql大致用时：26 m 10 s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行查询</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_tags <span class="token keyword">where</span> tags @<span class="token operator">&gt;</span> <span class="token string">&#39;{&quot;name&quot;:&quot;0f665df9b5403be11ac9d765eb0d2a89&quot;}&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 用时：65 ms (execution: 50 ms, fetching: 15 ms)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行explain analyse</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> analyse
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_tags <span class="token keyword">where</span> tags @<span class="token operator">&gt;</span> <span class="token string">&#39;{&quot;name&quot;:&quot;0f665df9b5403be11ac9d765eb0d2a89&quot;}&#39;</span><span class="token punctuation">;</span>

Bitmap Heap Scan <span class="token keyword">on</span> user_tags  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">67.50</span><span class="token punctuation">.</span><span class="token number">.7693</span><span class="token number">.46</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">2000</span> width<span class="token operator">=</span><span class="token number">165</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>actual <span class="token keyword">time</span><span class="token operator">=</span><span class="token number">0.079</span><span class="token punctuation">.</span><span class="token number">.0</span><span class="token number">.080</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">1</span> loops<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token string">&quot;  Recheck Cond: (tags @&gt; &#39;{&quot;&quot;name&quot;&quot;: &quot;&quot;0f665df9b5403be11ac9d765eb0d2a89&quot;&quot;}&#39;::jsonb)&quot;</span>
  Heap Blocks: exact<span class="token operator">=</span><span class="token number">1</span>
  <span class="token operator">-</span><span class="token operator">&gt;</span>  Bitmap <span class="token keyword">Index</span> Scan <span class="token keyword">on</span> user_tags_tags_idx1  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.67</span><span class="token number">.00</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">2000</span> width<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>actual <span class="token keyword">time</span><span class="token operator">=</span><span class="token number">0.073</span><span class="token punctuation">.</span><span class="token number">.0</span><span class="token number">.073</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">1</span> loops<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token string">&quot;        Index Cond: (tags @&gt; &#39;{&quot;&quot;name&quot;&quot;: &quot;&quot;0f665df9b5403be11ac9d765eb0d2a89&quot;&quot;}&#39;::jsonb)&quot;</span>
Planning <span class="token keyword">Time</span>: <span class="token number">0.803</span> ms
Execution <span class="token keyword">Time</span>: <span class="token number">0.098</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行 <em>gin_clean_pending_list</em></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> gin_clean_pending_list<span class="token punctuation">(</span><span class="token string">&#39;user_tags_tags_idx1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 用时：70 ms (execution: 50 ms, fetching: 20 ms)</span>
<span class="token comment">-- 输出：0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>再次插入数据（但稍许不一样）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">begin</span><span class="token punctuation">;</span>
<span class="token keyword">SET</span> gin_pending_list_limit <span class="token keyword">TO</span> <span class="token string">&#39;10000MB&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user_tags <span class="token punctuation">(</span>member_id<span class="token punctuation">,</span>tags<span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> gen_random_uuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>jsonb_build_object<span class="token punctuation">(</span>
        <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> md5<span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>::<span class="token keyword">text</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span>::<span class="token keyword">int</span><span class="token punctuation">,</span>
        <span class="token string">&#39;registered&#39;</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">INTERVAL</span> <span class="token string">&#39;1 day&#39;</span> <span class="token operator">*</span> <span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">800</span><span class="token punctuation">)</span>::<span class="token keyword">int</span>
                         <span class="token punctuation">)</span>
<span class="token keyword">FROM</span> generate_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">commit</span> <span class="token punctuation">;</span>

<span class="token comment">-- 相比第一次insert，多了一个  SET gin_pending_list_limit TO &#39;10000MB&#39;;</span>
<span class="token comment">-- 用时：4 m 51 s 659 ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>gin_pending_list_limit 参数解释</p><ol><li>当对gin索引进行更新的时候，会将数据写暂时存储在pending list中，以减少索引频繁更新。当pending list中的数据达到一定数量后，系统会将其内容合并到实际的gin索引中。</li><li>gin_pending_list_limit 就是控制pending list的大小。默认情况下是4MB，把这个参数调大，可以让更多数据写入到pending list中，延迟合并操作，从而提供了数据插入性能。</li><li>如果需要尽快插入大批量数据，可以调高这个参数值。（从上面的用时情况就能看出）</li></ol></li><li><p>5执行完后尽快执行查询</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_tags <span class="token keyword">where</span> tags @<span class="token operator">&gt;</span> <span class="token string">&#39;{&quot;name&quot;:&quot;0f665df9b5403be11ac9d765eb0d2a89&quot;}&#39;</span><span class="token punctuation">;</span>

<span class="token comment">-- 用时：29 s 173 ms (execution: 29 s 156 ms, fetching: 17 ms)</span>
<span class="token comment">-- 用时：28 s 960 ms (execution: 28 s 939 ms, fetching: 21 ms)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行explain analyse</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">explain</span> analyse
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> user_tags <span class="token keyword">where</span> tags @<span class="token operator">&gt;</span> <span class="token string">&#39;{&quot;name&quot;:&quot;0f665df9b5403be11ac9d765eb0d2a89&quot;}&#39;</span><span class="token punctuation">;</span>

Gather  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">1000.00</span><span class="token punctuation">.</span><span class="token number">.1185343</span><span class="token number">.38</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">4000</span> width<span class="token operator">=</span><span class="token number">165</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>actual <span class="token keyword">time</span><span class="token operator">=</span><span class="token number">44228.215</span><span class="token punctuation">.</span><span class="token number">.44229</span><span class="token number">.401</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">1</span> loops<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
  Workers Planned: <span class="token number">2</span>
  Workers Launched: <span class="token number">2</span>
  <span class="token operator">-</span><span class="token operator">&gt;</span>  Parallel Seq Scan <span class="token keyword">on</span> user_tags  <span class="token punctuation">(</span>cost<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">.</span><span class="token number">.1183943</span><span class="token number">.38</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">1667</span> width<span class="token operator">=</span><span class="token number">165</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>actual <span class="token keyword">time</span><span class="token operator">=</span><span class="token number">44152.806</span><span class="token punctuation">.</span><span class="token number">.44161</span><span class="token number">.681</span> <span class="token keyword">rows</span><span class="token operator">=</span><span class="token number">0</span> loops<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token string">&quot;        Filter: (tags @&gt; &#39;{&quot;&quot;name&quot;&quot;: &quot;&quot;0f665df9b5403be11ac9d765eb0d2a89&quot;&quot;}&#39;::jsonb)&quot;</span>
        <span class="token keyword">Rows</span> Removed <span class="token keyword">by</span> Filter: <span class="token number">13333333</span>
Planning <span class="token keyword">Time</span>: <span class="token number">0.137</span> ms
Execution <span class="token keyword">Time</span>: <span class="token number">44229.432</span> ms

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可以发现同一个sql 用时相差巨大，一个走了索引一个没有走索引.</p></li><li><p>等了一段时间后，估计2-3小时（这期间啥也没有动），再执行查询语句就恢复到秒回了，同时explain analyse 也显示走索引了</p></li><li><p>此时执行</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> gin_clean_pending_list<span class="token punctuation">(</span><span class="token string">&#39;user_tags_tags_idx1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 这个就是把pending list里的数据写入到实际的gin索引中</span>

<span class="token comment">-- 此时执行时，这个sql秒回，返回值0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>再次执行5的sql</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">begin</span><span class="token punctuation">;</span>
<span class="token keyword">SET</span> gin_pending_list_limit <span class="token keyword">TO</span> <span class="token string">&#39;10000MB&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> user_tags <span class="token punctuation">(</span>member_id<span class="token punctuation">,</span>tags<span class="token punctuation">)</span>
<span class="token keyword">SELECT</span> gen_random_uuid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>jsonb_build_object<span class="token punctuation">(</span>
        <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> md5<span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>::<span class="token keyword">text</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span>::<span class="token keyword">int</span><span class="token punctuation">,</span>
        <span class="token string">&#39;registered&#39;</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">INTERVAL</span> <span class="token string">&#39;1 day&#39;</span> <span class="token operator">*</span> <span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">800</span><span class="token punctuation">)</span>::<span class="token keyword">int</span>
                         <span class="token punctuation">)</span>
<span class="token keyword">FROM</span> generate_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">commit</span> <span class="token punctuation">;</span>

<span class="token comment">-- 用时：4 m 45 s 478 ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>再次执行上面的查询和explain，查询又变慢了，又没有走索引了。这里就不贴执行结果了。</p></li><li><p>在系统自动恢复gin索引前，手动触发一下</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> gin_clean_pending_list<span class="token punctuation">(</span><span class="token string">&#39;user_tags_tags_idx1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 这次就不是秒回了，用时：反正很久，几十分钟肯定有的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在14执行期间，可以对表进行增、删、改、查操作</p></li><li><p>等待14执行完成后，在执行查询又会回到秒回（到这一步的时候，表数据有6000万行数据）</p></li></ol><br><h2 id="系统推荐" tabindex="-1"><a class="header-anchor" href="#系统推荐" aria-hidden="true">#</a> 系统推荐</h2>`,23),d=n("p",null,[n("br"),n("br"),n("br"),n("br"),n("br"),n("br")],-1),k=n("hr",null,null,-1),m=n("hr",null,null,-1),v=n("ul",null,[n("li",null,[n("strong",null,"随机毒鸡汤"),s("：当代年轻人恋爱最高境界，无话可说，但又彼此折磨。 "),n("br"),n("br"),n("img",{src:"https://tuapi.eees.cc/api.php?category=fengjing&type=302&uuid=38f79c0b-1450-4479-9494-52272bc0c8ff",alt:"",loading:"lazy"})])],-1);function b(g,_){const a=i("RouterLink");return o(),l("div",null,[r,n("ul",null,[n("li",null,[e(a,{to:"/software/unclassified/Btrace%E5%85%A5%E9%97%A8.html"},{default:t(()=>[s("Btrace入门")]),_:1})]),n("li",null,[e(a,{to:"/software/docker/Docker%E8%BF%9B%E8%A1%8C%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB.html"},{default:t(()=>[s("Docker进行资源隔离")]),_:1})]),n("li",null,[e(a,{to:"/other/Censys%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0.html"},{default:t(()=>[s("Censys搜索引擎学习")]),_:1})]),n("li",null,[e(a,{to:"/software/java-basic/Thread%20&%20ExecutorService%20&%20ThreadPoolExecutor%20%E6%80%BB%E8%A7%88.html"},{default:t(()=>[s("Thread & ExecutorService & ThreadPoolExecutor 总览")]),_:1})]),n("li",null,[e(a,{to:"/software/middleware/mysql/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.html"},{default:t(()=>[s("InnoDB存储引擎")]),_:1})]),n("li",null,[e(a,{to:"/software/docker/Docker%E7%AC%94%E8%AE%B0.html"},{default:t(()=>[s("Docker笔记")]),_:1})]),n("li",null,[e(a,{to:"/software/unclassified/linux_no_space_left_on_device.html"},{default:t(()=>[s("linux_no_space_left_on_device")]),_:1})]),n("li",null,[e(a,{to:"/software/unclassified/Javassist%E6%95%B4%E7%90%86.html"},{default:t(()=>[s("Javassist整理")]),_:1})]),n("li",null,[e(a,{to:"/software/docker/Centos%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85Docker.html"},{default:t(()=>[s("Centos离线安装Docker")]),_:1})]),n("li",null,[e(a,{to:"/other/Spring%20Boot%E5%8D%87%E7%BA%A7%E5%88%B02%206%20x%E8%B8%A9%E7%9A%84%E5%9D%91.html"},{default:t(()=>[s("Spring Boot升级到2 6 x踩的坑")]),_:1})]),n("li",null,[e(a,{to:"/software/docker/Docker%E8%B7%A8%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1%E6%96%B9%E6%A1%88.html"},{default:t(()=>[s("Docker跨主机通信方案")]),_:1})]),n("li",null,[e(a,{to:"/software/unclassified/%E6%9D%82%E8%AE%B0.html"},{default:t(()=>[s("杂记")]),_:1})])]),d,k,m,v])}const y=p(u,[["render",b],["__file","PGSQL GIN索引“失效”.html.vue"]]);export{y as default};
