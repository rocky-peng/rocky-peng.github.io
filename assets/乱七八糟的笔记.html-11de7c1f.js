const e=JSON.parse('{"key":"v-8fb85312","path":"/software/unclassified/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E7%AC%94%E8%AE%B0.html","title":"乱七八糟的笔记","lang":"zh-CN","frontmatter":{"title":"乱七八糟的笔记","date":"2018-05-21T00:00:00.000Z","description":"Java 自带的动态代理实现原理。 使用方法 核心方法： Proxy.newProxyInstance(ClassLoader cl,Class[] interfaces,InvocationHandler iv)","head":[["link",{"rel":"canonical","href":"https://justsoso.fun/software/unclassified/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:url","content":"https://justsoso.fun/software/unclassified/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E7%AC%94%E8%AE%B0.html"}],["meta",{"property":"og:site_name","content":"技术加油站"}],["meta",{"property":"og:title","content":"乱七八糟的笔记"}],["meta",{"property":"og:description","content":"Java 自带的动态代理实现原理。 使用方法 核心方法： Proxy.newProxyInstance(ClassLoader cl,Class[] interfaces,InvocationHandler iv)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-02T15:20:21.000Z"}],["meta",{"property":"article:published_time","content":"2018-05-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-02T15:20:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"乱七八糟的笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-05-21T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-02T15:20:21.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"使用方法","slug":"使用方法","link":"#使用方法","children":[]},{"level":2,"title":"如果是我会怎么实现newProxyInstance这个方法","slug":"如果是我会怎么实现newproxyinstance这个方法","link":"#如果是我会怎么实现newproxyinstance这个方法","children":[{"level":3,"title":"第一步","slug":"第一步","link":"#第一步","children":[]},{"level":3,"title":"第二步","slug":"第二步","link":"#第二步","children":[]}]},{"level":2,"title":"Proxy类的实现方式","slug":"proxy类的实现方式","link":"#proxy类的实现方式","children":[]},{"level":2,"title":"简单请求和复杂请求","slug":"简单请求和复杂请求","link":"#简单请求和复杂请求","children":[]},{"level":2,"title":"用户态和内核态（用户空间、内核空间）","slug":"用户态和内核态-用户空间、内核空间","link":"#用户态和内核态-用户空间、内核空间","children":[]},{"level":2,"title":"mongo与mysql如何保证数据一致性","slug":"mongo与mysql如何保证数据一致性","link":"#mongo与mysql如何保证数据一致性","children":[]},{"level":2,"title":"rocketmq","slug":"rocketmq","link":"#rocketmq","children":[]},{"level":2,"title":"docker 容器 oom，异常重启","slug":"docker-容器-oom-异常重启","link":"#docker-容器-oom-异常重启","children":[]},{"level":2,"title":"docker events 命令","slug":"docker-events-命令","link":"#docker-events-命令","children":[]},{"level":2,"title":"系统推荐","slug":"系统推荐","link":"#系统推荐","children":[]}],"git":{"createdTime":1672737620000,"updatedTime":1746199221000,"contributors":[{"name":"rocky-peng","email":"rocky.peng@qq.com","commits":669},{"name":"rocky.peng","email":"rocky.peng@qq.com","commits":22}]},"readingTime":{"minutes":8.05,"words":2415},"filePathRelative":"software/unclassified/乱七八糟的笔记.md","localizedDate":"2018年5月21日","excerpt":"<h1> Java 自带的动态代理实现原理。</h1>\\n<h2> 使用方法</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code>核心方法：\\n<span class=\\"token class-name\\">Proxy</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newProxyInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ClassLoader</span> cl<span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">Class</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> interfaces<span class=\\"token punctuation\\">,</span><span class=\\"token class-name\\">InvocationHandler</span> iv<span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}');export{e as data};
