import{_ as c,$ as i,a0 as p,a1 as n,a2 as s,a3 as a,a4 as e,a5 as u,w as o}from"./framework-8c4427da.js";const r={},d=u(`<p>使用spring的retry框架用两种方式，一种注解方式，一种代码方式，这里主要介绍代码编程方式。</p><p>初始化RetryTemplate主要有两个参数：</p><ol><li>RetryPolicy 主要定义什么情况要进行重试以及重试次数，比如超时、满足某个表达式。</li><li>BackoffPolicy 主要定义两次重试之间的等待时间。backoff这个单词在计算机系统中有很多地方都有，代表的意思基本相同，基本都是重试直接的等待时间。<strong>它的基本思想是在遇到错误时，不是立即重试，而是等待一段时间后再尝试。这种等待的时间通常是逐渐增加的，这就是所谓的“退避”</strong></li></ol><h2 id="retrypolicy" tabindex="-1"><a class="header-anchor" href="#retrypolicy" aria-hidden="true">#</a> RetryPolicy</h2><figure><img src="https://cdn.justdopay.top/notion/md5-19c6d975b35469503fc76e09db892242.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><ul><li>SimpleRetryPolicy 默认最多重试3次</li><li>TimeoutRetryPolicy 默认在1秒内失败都会重试</li><li>ExpressionRetryPolicy 符合表达式就会重试</li><li>CircuitBreakerRetryPolicy 增加了熔断的机制，如果不在熔断状态，则允许重试</li><li>CompositeRetryPolicy 可以组合多个重试策略</li><li>NeverRetryPolicy 不重试</li><li>AlwaysRetryPolicy 一直重试</li></ul><h2 id="backoffpolicy" tabindex="-1"><a class="header-anchor" href="#backoffpolicy" aria-hidden="true">#</a> BackoffPolicy</h2><figure><img src="https://cdn.justdopay.top/notion/md5-614e14d24ffe43bce55b4322d1fb8d01.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><ul><li>FixedBackOffPolicy 默认固定延迟1秒后执行下一次重试</li><li>ExponentialBackOffPolicy 指数递增延迟执行重试，默认初始0.1秒，系数是2，那么下次延迟0.2秒，再下次就是延迟0.4秒，如此类推，最大30秒。</li><li>ExponentialRandomBackOffPolicy 在上面那个策略上增加随机性</li><li>UniformRandomBackOffPolicy 这个跟上面的区别就是，上面的延迟会不停递增，这个只会在固定的区间随机</li><li>StatelessBackOffPolicy 这个说明是无状态的，所谓无状态就是对上次的退避无感知，从它下面的子类也能看出来</li></ul><p>个人比较喜欢实用 ExponentialBackOffPolicy</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><figure><img src="https://cdn.justdopay.top/notion/md5-9311b7ee9c5e11088a191a3662ca7f51.png" alt="Untitled" tabindex="0" loading="lazy"><figcaption>Untitled</figcaption></figure><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">private</span> <span class="token keyword">static</span> final RetryTemplate <span class="token constant">RETRY_TEMPLATE</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token punctuation">{</span>
    <span class="token comment">//重试时间间隔，分别是300ms,600ms,1200ms,依次翻倍，一直到最大时间间隔为3000ms</span>
    ExponentialBackOffPolicy backOffPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExponentialBackOffPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    backOffPolicy<span class="token punctuation">.</span><span class="token function">setInitialInterval</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    backOffPolicy<span class="token punctuation">.</span><span class="token function">setMaxInterval</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token constant">RETRY_TEMPLATE</span> <span class="token operator">=</span> RetryTemplate<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">//当抛这些异常的时候进行重试</span>
            <span class="token punctuation">.</span><span class="token function">retryOn</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>RemoteAccessException<span class="token punctuation">.</span>class<span class="token punctuation">,</span> TimeoutException<span class="token punctuation">.</span>class<span class="token punctuation">,</span> NullPointerException<span class="token punctuation">.</span>class<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">//最大重试次数为4</span>
            <span class="token punctuation">.</span><span class="token function">maxAttempts</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
            <span class="token comment">//自定义重试时间间隔</span>
            <span class="token punctuation">.</span><span class="token function">customBackoff</span><span class="token punctuation">(</span>backOffPolicy<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> Object <span class="token function">httpRemoteCall</span><span class="token punctuation">(</span><span class="token parameter">Object<span class="token operator">...</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    AtomicInteger retryCounter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token constant">RETRY_TEMPLATE</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>ctx <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;第&quot;</span> <span class="token operator">+</span> retryCounter<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;次执行远程调用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//在这里正常写远程调用的代码</span>

        <span class="token comment">//正常返回远程调用的结果</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h2>`,14),k={href:"https://github.com/spring-projects/spring-retry",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),E=n("h2",{id:"系统推荐",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#系统推荐","aria-hidden":"true"},"#"),s(" 系统推荐")],-1),f=n("p",null,[n("br"),n("br"),n("br"),n("br"),n("br"),n("br")],-1),b=n("hr",null,null,-1),h=n("hr",null,null,-1),v=n("ul",null,[n("li",null,[n("strong",null,"随机毒鸡汤"),s("：借钱见人心，还钱见人品。 "),n("br"),n("br"),n("img",{src:"https://images.pexels.com/photos/31868594/pexels-photo-31868594.jpeg?auto=compress&cs=tinysrgb&h=650&w=940",alt:"Fashionable woman in pink ensemble with heart-shaped sunglasses by a bright window, exuding confidence.",loading:"lazy"})])],-1);function y(B,A){const l=o("ExternalLinkIcon"),t=o("RouterLink");return i(),p("div",null,[d,n("p",null,[n("a",k,[s("https://github.com/spring-projects/spring-retry"),a(l)])]),m,E,n("ul",null,[n("li",null,[a(t,{to:"/software/middleware/mysql/MySQL%E6%9D%82%E9%A1%B9.html"},{default:e(()=>[s("MySQL杂项")]),_:1})]),n("li",null,[a(t,{to:"/other/Nacos-Spring%20Gateway-Spring%20boot%E6%97%A0%E6%84%9F%E5%8F%91%E5%B8%83.html"},{default:e(()=>[s("Nacos-Spring Gateway-Spring boot无感发布")]),_:1})]),n("li",null,[a(t,{to:"/software/java-basic/IO%E7%9B%B8%E5%85%B3.html"},{default:e(()=>[s("IO相关")]),_:1})]),n("li",null,[a(t,{to:"/other/Hadoop%20%E4%B8%80.html"},{default:e(()=>[s("Hadoop 一")]),_:1})]),n("li",null,[a(t,{to:"/software/java-basic/Thread%20&%20ExecutorService%20&%20ThreadPoolExecutor%20%E6%80%BB%E8%A7%88.html"},{default:e(()=>[s("Thread & ExecutorService & ThreadPoolExecutor 总览")]),_:1})]),n("li",null,[a(t,{to:"/software/middleware/es/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Edocker%E7%9A%84elk%E5%B9%B3%E5%8F%B0%E6%9D%A5%E5%88%86%E6%9E%90java%E6%97%A5%E5%BF%97.html"},{default:e(()=>[s("搭建基于docker的elk平台来分析java日志")]),_:1})]),n("li",null,[a(t,{to:"/software/unclassified/Flutter%E5%BC%80%E5%8F%91%E9%9C%80%E8%A6%81%E6%B6%89%E5%8F%8A%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9%E5%A4%A7%E7%BA%B2.html"},{default:e(()=>[s("Flutter开发需要涉及的知识点大纲")]),_:1})]),n("li",null,[a(t,{to:"/software/java-basic/AQS%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB.html"},{default:e(()=>[s("AQS源码解读")]),_:1})]),n("li",null,[a(t,{to:"/other/%E8%A1%8C%E8%BD%AC%E5%88%97%E4%B8%8D%E5%86%8D%E5%A4%8D%E6%9D%82%EF%BC%9ASQL%E9%AB%98%E6%89%8B%E9%83%BD%E5%9C%A8%E7%94%A8%E7%9A%84%E6%8A%80%E5%B7%A7%E6%8F%AD%E7%A7%98.html"},{default:e(()=>[s("行转列不再复杂：SQL高手都在用的技巧揭秘")]),_:1})]),n("li",null,[a(t,{to:"/other/%E5%89%8D%E7%AB%AFaxios%E4%B8%8B%E8%BD%BDcsv%E6%96%87%E4%BB%B6%E4%B9%B1%E7%A0%81.html"},{default:e(()=>[s("前端axios下载csv文件乱码")]),_:1})]),n("li",null,[a(t,{to:"/software/middleware/es/ES%E6%9D%82%E9%A1%B9.html"},{default:e(()=>[s("ES杂项")]),_:1})]),n("li",null,[a(t,{to:"/other/Lombok%E7%9A%84Accessors%E5%AF%BC%E8%87%B4EasyExcel%E8%AF%BB%E5%8F%96%E5%A4%B1%E8%B4%A5.html"},{default:e(()=>[s("Lombok的Accessors导致EasyExcel读取失败")]),_:1})])]),f,b,h,v])}const _=c(r,[["render",y],["__file","Spring RetryTemplate.html.vue"]]);export{_ as default};
