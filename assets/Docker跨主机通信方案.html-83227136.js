import{_ as d,$ as o,a0 as c,a1 as e,a2 as a,a3 as t,a4 as n,a5 as s,w as r}from"./framework-b3a0f150.js";const u={},h=e("h2",{id:"方案一-pipework",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#方案一-pipework","aria-hidden":"true"},"#"),a(" 方案一：pipework")],-1),v={href:"https://www.jianshu.com/p/4d8605bea2bb",target:"_blank",rel:"noopener noreferrer"},p=s(`<ul><li>可以达到容器与宿主机保持在同一个网段</li><li>但是无法指定docker容器IP，IP是递增的</li><li>操作过程中可能会中断网络</li><li>容器内部有时可以联网有时不可以（估计是ip无效）</li><li>跨主机的网络互通未测试了</li><li>重启宿主机后信息会丢失，又要重新执行下设置步骤</li></ul><p><strong>注意：</strong> 上诉问题也许是我个人操作不当才有的问题，但我还是不建议采用</p><h2 id="方案二-weave" tabindex="-1"><a class="header-anchor" href="#方案二-weave" aria-hidden="true">#</a> 方案二：weave</h2><p>采用这个方案后，我测试了下方案一出现的问题，貌似都没有</p><p>我是在自己电脑（ 192.168.43.209 ）上测试的，用vmware安装了一个centos7.4的系统，网络采用桥接方式，然后进入系统安装了一些我自己常用的工具后关机，使用vmware的 create linked clone 功能创建了三个节点：</p><ul><li>test1 （192.168.43.155）</li><li>test2 （192.168.43.2）</li><li>test4 （192.168.43.126）</li></ul><figure><img src="https://cdn.justdopay.top/xiaoshujiang/1629082431307.png" alt="enter description here" tabindex="0" loading="lazy"><figcaption>enter description here</figcaption></figure><figure><img src="https://cdn.justdopay.top/xiaoshujiang/1629082436552.png" alt="enter description here" tabindex="0" loading="lazy"><figcaption>enter description here</figcaption></figure><h3 id="步骤一-在所有节点上安装weave" tabindex="-1"><a class="header-anchor" href="#步骤一-在所有节点上安装weave" aria-hidden="true">#</a> 步骤一：在所有节点上安装weave</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -L git.io/weave -o /usr/local/bin/weave
chmod a+x /usr/local/bin/weave
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="步骤二-在所有节点上设置防火墙" tabindex="-1"><a class="header-anchor" href="#步骤二-在所有节点上设置防火墙" aria-hidden="true">#</a> 步骤二：在所有节点上设置防火墙</h3><ul><li>可以直接简单粗暴关闭防火墙</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>➜  ~ systemctl disable firewalld.service  //禁止防火墙开机启动
➜  ~ systemctl start firewalld			//开启防火墙
➜  ~ firewall-cmd --state               //查看防火墙是否启动
running
➜  ~ systemctl stop firewalld 			//关闭防火墙
➜  ~ firewall-cmd --state               
not running
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第二种就是放行weave需要的端口</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>iptables -t filter -I INPUT -p tcp --dport 6783 -j ACCEPT
iptables -t filter -I INPUT -p udp --dport 6783 -j ACCEPT
iptables -t filter -I INPUT -p udp --dport 6784 -j ACCEPT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),m={href:"http://www.zsythink.net/archives/tag/iptables/page/2/",target:"_blank",rel:"noopener noreferrer"},b=s(`<p><strong>注意：</strong> 是所有节点都要执行</p><h3 id="在所有节点上启动weave" tabindex="-1"><a class="header-anchor" href="#在所有节点上启动weave" aria-hidden="true">#</a> 在所有节点上启动weave</h3><p>在test1 上执行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weave launch

这个命令会启动一个docker容器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在test2 上执行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weave launch 192.168.43.155

这个命令会启动一个docker容器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在test4 上执行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weave launch 192.168.43.155 192.168.43.2
这个命令会启动一个docker容器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在节点n上执行：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>weave launch ip1 ip2 ip3 ipn
这个命令会启动一个docker容器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动docker容器" tabindex="-1"><a class="header-anchor" href="#启动docker容器" aria-hidden="true">#</a> 启动docker容器</h3><p><strong>注意：</strong> 启动容器前，<strong>先执行: eval $(weave env)</strong> ，将docker命令代理给weave 执行,(如果先执行这个, docker命令启动的容器就会被自动加入weave网络,并自动分配IP)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>test1: 
docker run -itd --name t1 centos

test2:
docker run -itd --name t2 centos

test4:
docker run -itd --name t4 centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上诉的命令正常来说不会设置docker容器的hostname为name的值，但由于执行了eval $(weave env)命令，所以上诉的命令会自动设置docker容器的hostname为name参数的值</p><figure><img src="https://cdn.justdopay.top/xiaoshujiang/1629082444664.png" alt="enter description here" tabindex="0" loading="lazy"><figcaption>enter description here</figcaption></figure><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><p>我尝试过重启宿主机，重启docker。这个时候重启之前的t1 t2 t4后它们还是能互通，<strong>若要新建docker容器，需要再执行下 eval $(weave env)</strong></p><h3 id="weave-扩展资料" tabindex="-1"><a class="header-anchor" href="#weave-扩展资料" aria-hidden="true">#</a> WEAVE 扩展资料</h3>`,18),g={href:"https://github.com/weaveworks/weave",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.weave.works/docs/net/latest/install/using-weave/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.jianshu.com/p/b91bf21ac946",target:"_blank",rel:"noopener noreferrer"},E=e("br",null,null,-1),_=e("h2",{id:"系统推荐",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#系统推荐","aria-hidden":"true"},"#"),a(" 系统推荐")],-1),x=e("p",null,[e("br"),e("br"),e("br"),e("br"),e("br"),e("br")],-1),k=e("hr",null,null,-1),A=e("hr",null,null,-1),B=e("ul",null,[e("li",null,[e("strong",null,"随机毒鸡汤"),a("：人还是要有梦想的，即使是咸鱼， 也要做最咸的那一条。 "),e("br"),e("br"),e("img",{src:"https://images.pexels.com/photos/16361644/pexels-photo-16361644.jpeg?auto=compress&cs=tinysrgb&h=650&w=940",alt:"A reflective view of a cross with stunning Lake Tekapo landscape in the background.",loading:"lazy"})])],-1);function j(I,P){const l=r("ExternalLinkIcon"),i=r("RouterLink");return o(),c("div",null,[h,e("p",null,[a("主要参照的是："),e("a",v,[a("https://www.jianshu.com/p/4d8605bea2bb"),t(l)]),a(" 这篇博文。")]),p,e("p",null,[a("具体iptables的用法参考（如果不关心，只需要执行上面三行命令就行）："),e("a",m,[a("http://www.zsythink.net/archives/tag/iptables/page/2/"),t(l)])]),b,e("ul",null,[e("li",null,[a("github地址："),e("a",g,[a("https://github.com/weaveworks/weave"),t(l)])]),e("li",null,[a("官网地址："),e("a",w,[a("https://www.weave.works/docs/net/latest/install/using-weave/"),t(l)])]),e("li",null,[a("其他博客："),e("a",f,[a("https://www.jianshu.com/p/b91bf21ac946"),t(l)])])]),E,_,e("ul",null,[e("li",null,[t(i,{to:"/software/unclassified/Cordova+Umi%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4.html"},{default:n(()=>[a("Cordova+Umi项目搭建步骤")]),_:1})]),e("li",null,[t(i,{to:"/software/unclassified/Btrace%E5%85%A5%E9%97%A8.html"},{default:n(()=>[a("Btrace入门")]),_:1})]),e("li",null,[t(i,{to:"/software/spring/Spring%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E5%85%B3%E9%94%AE%E7%82%B9.html"},{default:n(()=>[a("Spring框架源码关键点")]),_:1})]),e("li",null,[t(i,{to:"/other/JetBrains%20IDE%20%E5%85%A8%E7%A0%B4%E8%A7%A3.html"},{default:n(()=>[a("JetBrains IDE 全破解")]),_:1})]),e("li",null,[t(i,{to:"/other/PGSQL%20GIN%E7%B4%A2%E5%BC%95%E2%80%9C%E5%A4%B1%E6%95%88%E2%80%9D.html"},{default:n(()=>[a("PGSQL GIN索引“失效”")]),_:1})]),e("li",null,[t(i,{to:"/software/middleware/mq/kafka.html"},{default:n(()=>[a("kafka")]),_:1})]),e("li",null,[t(i,{to:"/software/middleware/mysql/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.html"},{default:n(()=>[a("分库分表")]),_:1})]),e("li",null,[t(i,{to:"/software/java-basic/%E5%B8%B8%E7%94%A8%E9%98%9F%E5%88%97.html"},{default:n(()=>[a("常用队列")]),_:1})]),e("li",null,[t(i,{to:"/other/%E6%8E%A8%E8%8D%90%E5%87%A0%E4%B8%AA%E9%80%82%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7.html"},{default:n(()=>[a("推荐几个适用小工具")]),_:1})]),e("li",null,[t(i,{to:"/other/PostgreSQL%20JSON%E7%B1%BB%E5%9E%8B%E5%AD%97%E6%AE%B5%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C.html"},{default:n(()=>[a("PostgreSQL JSON类型字段常用操作")]),_:1})]),e("li",null,[t(i,{to:"/other/PostgreSQL%E9%AB%98%E5%8F%AF%E7%94%A8.html"},{default:n(()=>[a("PostgreSQL高可用")]),_:1})]),e("li",null,[t(i,{to:"/other/Hbase%20%E6%80%BB%E8%A7%88.html"},{default:n(()=>[a("Hbase 总览")]),_:1})])]),x,k,A,B])}const C=d(u,[["render",j],["__file","Docker跨主机通信方案.html.vue"]]);export{C as default};
