import{_ as l,$ as p,a0 as o,a1 as n,a3 as e,a4 as t,a5 as i,a2 as s,w as c}from"./framework-58787b1c.js";const u={},r=i(`<h2 id="queue" tabindex="-1"><a class="header-anchor" href="#queue" aria-hidden="true">#</a> Queue</h2><p>继承自Collection接口.</p><p>共6个方法，分为三类：插入，移除，检测，每类方法有两个方法:</p><table><thead><tr><th style="text-align:right;"></th><th style="text-align:left;">抛出异常</th><th style="text-align:left;">返回特定值</th></tr></thead><tbody><tr><td style="text-align:right;">插入</td><td style="text-align:left;">add(e)</td><td style="text-align:left;">offer(e)</td></tr><tr><td style="text-align:right;">移除</td><td style="text-align:left;">remove</td><td style="text-align:left;">poll</td></tr><tr><td style="text-align:right;">检测</td><td style="text-align:left;">element()</td><td style="text-align:left;">peek()</td></tr></tbody></table><p>上面6个方法都是非阻塞方法</p><ul><li>elment()方法：得到队列第一个元素，但不从队列中移除，如果没有元素，则抛出异常</li><li>peek()方法：得到队列第一个元素，但不从队列中移除，如果没有元素，则返回null</li></ul><h2 id="blockingqueue" tabindex="-1"><a class="header-anchor" href="#blockingqueue" aria-hidden="true">#</a> BlockingQueue</h2><ul><li>take() 和 put(e) 是BlockingQueue提供的两个阻塞方法（具体是否阻塞要看具体的实现类，有些实现类虽然可以指定容量，但这个容量是初始容量，也就是允许容量扩大，那么这种情况下put方法是不会阻塞，比如PriorityBlockingQuque，这个实现在执行put方法的时候就不会阻塞）</li><li>drainTo(Collection c) 将阻塞队列中可用的数据都转移到参数给定的集合中</li></ul><h3 id="arrayblockingqueue" tabindex="-1"><a class="header-anchor" href="#arrayblockingqueue" aria-hidden="true">#</a> ArrayBlockingQueue</h3><ol><li>基于指定长度的数组实现，不可扩容。维护了两个int型变量，分别执行队首和队尾下标，实现循环数组的效果</li><li>由于采用了一个锁，所以在入队操作和出队操作不能同时进行</li><li>可以指定采用的锁是否为公平锁，默认情况下为非公平锁</li></ol><h3 id="linkedblockingqueue" tabindex="-1"><a class="header-anchor" href="#linkedblockingqueue" aria-hidden="true">#</a> LinkedBlockingQueue</h3><ol><li>基于带头结点的单向链表实现，不过头结点的指向是变动的，不可扩容。</li><li>采用了两个锁（一个用于入队，一个用于出队），所以入队出队两个操作互不影响。两个锁都是非公平锁。</li><li>初始化时建议制定一个容量，否则是int的最大值。如果生产者速度比消费者快，可能会消耗大量内存。</li></ol><h3 id="priorityblockingqueue" tabindex="-1"><a class="header-anchor" href="#priorityblockingqueue" aria-hidden="true">#</a> PriorityBlockingQueue</h3><ol><li><p>物理上基于数组来实现，逻辑上采用的是堆存储结构，可扩容。put方法采用offer方法实现，所以put方法不会阻塞</p></li><li><p>排序算法采用的是堆排序，遍历这个队列并不能得到有序输出，只有依次执行出队操作才能得到有序输出。</p></li><li><p>使用一个锁来完成</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>priorityBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>priorityBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>priorityBlockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> priorityBlockingQueue<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//输出：1，8，4</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
# 会发现并非按照<span class="token number">1</span>，<span class="token number">4</span>，<span class="token number">8</span>的顺序输出。但下面的就是就是按照 <span class="token number">1</span>，<span class="token number">4</span>，<span class="token number">8</span>的顺序输出

<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>priorityBlockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//输出：1，4，8</span>
# 但这个队列会保证队列的第一个元素永远是当前优先级最高的元素
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>要求要么元素实现了Comparable接口，要么这个队列有一个Comparator实例</li></ol><h3 id="synchronousqueue" tabindex="-1"><a class="header-anchor" href="#synchronousqueue" aria-hidden="true">#</a> SynchronousQueue</h3><ol><li>是一个无缓冲的等待队列，手递手队列，生产入队的时候需要有线程等待消费出队，消费出队的时候必须有线程正要生产入队，否则线程阻塞。</li><li>有两种模式 <ol><li>公平模式 使用FIFO队列来阻塞多余的生产者和消费者，从而体系整体的公平策略</li><li>非公平模式 使用LIFO队列来管理多余的生产者和消费者，如果生产者和消费者的处理速度有差距，则很容易出现饥渴的情况，即可能有某些生产者或者是消费者的数据永远都得不到处理。</li></ol></li></ol><h3 id="delayqueue" tabindex="-1"><a class="header-anchor" href="#delayqueue" aria-hidden="true">#</a> DelayQueue</h3><ol><li><p>消息入队后，只有队列成员的延迟时间到了，才能出队。无界队列</p></li><li><p>出队和入队使用一个锁来完成。</p></li><li><p>实现原理 使用优先级队列来存储消息，出队时检查延迟时间是否满足，满足则出队。否则阻塞当前线程。</p></li><li><p>哪些场景下会用到延迟队列？</p><ol><li><p>定时任务调度，比如java里的Timer，ScheduledThreadPoolExecutor，这两个里都用到的延迟队列（这两个都自己实现了自己的延迟队列，并没有直接采用DelayQueue）</p></li><li><p>缓存系统的ttl，比如redis的ttl。（延迟从缓存中清除）</p></li></ol></li><li><p>是否无界这个问题？ 我觉得没有必要去记忆，因为不同的具体实现可以有不同的容量，我甚至可以自己实现一个延迟队列，要求只运行存放100或1000个。所以我觉得用的时候去看下javadoc或者源码就可以了。</p></li></ol><h3 id="linkedtransferqueue" tabindex="-1"><a class="header-anchor" href="#linkedtransferqueue" aria-hidden="true">#</a> LinkedTransferQueue</h3><h3 id="linkedblockingdeque" tabindex="-1"><a class="header-anchor" href="#linkedblockingdeque" aria-hidden="true">#</a> LinkedBlockingDeque</h3><ol><li>数据结构采用的是双向链表</li><li>可以在队列两头进行入队或出队</li><li>使用了一个ReentrantLock实例来完成</li></ol><h3 id="arrayblockingqueue与linkedblockingqueue的区别" tabindex="-1"><a class="header-anchor" href="#arrayblockingqueue与linkedblockingqueue的区别" aria-hidden="true">#</a> ArrayBlockingQueue与LinkedBlockingQueue的区别？</h3><ol><li>使用的结构不一样</li><li>使用的锁数量不一样</li><li>两者对gc的影响有些不一样:前者不会额外创建对象，后者会额外创建node对象。所以如果频繁的入队和出队，后者会生成大量的Node对象。在这一点有所不同。</li></ol><h3 id="priorityblockingqueue和delayqueue的区别" tabindex="-1"><a class="header-anchor" href="#priorityblockingqueue和delayqueue的区别" aria-hidden="true">#</a> PriorityBlockingQueue和DelayQueue的区别？</h3><ol><li>在原理上两个都用到了优先级队列的思想，但在实现上，前者自己实现了优先级队列，后者组合了PriorityQueue来实现优先级队列的</li><li>前者的阻塞条件是如果队列为空阻塞，后者的阻塞条件除了队列为空阻塞外还有一个就是如果延迟时间未到也阻塞</li></ol><h3 id="synchronousqueue和linkedtransferqueue的区别" tabindex="-1"><a class="header-anchor" href="#synchronousqueue和linkedtransferqueue的区别" aria-hidden="true">#</a> SynchronousQueue和LinkedTransferQueue的区别？</h3><h2 id="transferqueue" tabindex="-1"><a class="header-anchor" href="#transferqueue" aria-hidden="true">#</a> TransferQueue</h2><ol><li>生产者生产消息的时候要求同时有消费者等待消费消息的一种队列。</li><li>继承了BlockingQueue，也是一种阻塞队列。</li><li>多加了几个方法的定义<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">tryTransfer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> <span class="token function">tryTransfer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>
<span class="token keyword">boolean</span> <span class="token function">hasWaitingConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">getWaitingConsumerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h2><ol><li>在线程池中使用无界队列的话，maxPoolSize可以说没有用，消耗队列的线程个数应该只有corePoolSize</li><li></li></ol><h2 id="dual-stack" tabindex="-1"><a class="header-anchor" href="#dual-stack" aria-hidden="true">#</a> Dual Stack</h2><h2 id="dual-queue" tabindex="-1"><a class="header-anchor" href="#dual-queue" aria-hidden="true">#</a> Dual Queue</h2><h2 id="scheduledthreadpoolexecutor" tabindex="-1"><a class="header-anchor" href="#scheduledthreadpoolexecutor" aria-hidden="true">#</a> ScheduledThreadPoolExecutor</h2><ol><li><p>继承自ThreadPoolExecutor，实例化的时候，采用了自己内部实现的延迟队列，进而实现定时功能</p></li><li><p>从小到大排序</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//从小到大：前者减后者</span>

<span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Person</span> o1<span class="token punctuation">,</span> <span class="token class-name">Person</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> o1<span class="token punctuation">.</span>id <span class="token operator">-</span> o2<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//等同于下面的</span>
<span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Person</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> id <span class="token operator">-</span> o<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">//按照指定顺序排序</span>
<span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Person</span> o1<span class="token punctuation">,</span> <span class="token class-name">Person</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sortIndex<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">-</span> sortIndex<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//等同于</span>
<span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Person</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sortIndex<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">-</span> sortIndex<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>堆排序</li></ol><br><h2 id="系统推荐" tabindex="-1"><a class="header-anchor" href="#系统推荐" aria-hidden="true">#</a> 系统推荐</h2>`,40),d=n("p",null,[n("br"),n("br"),n("br"),n("br"),n("br"),n("br")],-1),k=n("hr",null,null,-1),m=n("hr",null,null,-1),h=n("ul",null,[n("li",null,[n("strong",null,"随机毒鸡汤"),s("：白天各有各的光鲜，夜晚各有各的崩溃。 "),n("br"),n("br"),n("img",{src:"https://tuapi.eees.cc/api.php?category=fengjing&type=302&uuid=dd5a4d33-3edc-42f6-a8dc-224b05b3e3d6",alt:"",loading:"lazy"})])],-1);function v(b,f){const a=c("RouterLink");return p(),o("div",null,[r,n("ul",null,[n("li",null,[e(a,{to:"/software/unclassified/MyBatis.html"},{default:t(()=>[s("MyBatis")]),_:1})]),n("li",null,[e(a,{to:"/other/Git%E5%90%88%E5%B9%B6%E5%A4%9A%E4%B8%AA%E6%8F%90%E4%BA%A4%E5%B9%B6push%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.html"},{default:t(()=>[s("Git合并多个提交并push到远程仓库")]),_:1})]),n("li",null,[e(a,{to:"/software/unclassified/NGINX.html"},{default:t(()=>[s("NGINX")]),_:1})]),n("li",null,[e(a,{to:"/other/%E6%95%B0%E7%BB%84%E8%BD%AC%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E5%8F%AA%E9%9C%80%E4%B8%A4%E6%AD%A5.html"},{default:t(()=>[s("数组转树形结构只需两步")]),_:1})]),n("li",null,[e(a,{to:"/software/unclassified/%E7%BA%BF%E4%B8%8AFullGC%E9%A2%91%E7%B9%81%E7%9A%84%E6%8E%92%E6%9F%A5.html"},{default:t(()=>[s("线上FullGC频繁的排查")]),_:1})]),n("li",null,[e(a,{to:"/software/java-basic/CountDownLatch%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB.html"},{default:t(()=>[s("CountDownLatch源码解读")]),_:1})]),n("li",null,[e(a,{to:"/software/jvm/JVM%E6%9D%82%E9%A1%B9.html"},{default:t(()=>[s("JVM杂项")]),_:1})]),n("li",null,[e(a,{to:"/other/JetBrains-License-Server.html"},{default:t(()=>[s("JetBrains-License-Server")]),_:1})]),n("li",null,[e(a,{to:"/other/Java%E8%AF%AD%E8%A8%80%E5%AE%8C%E6%88%90notion%E7%AC%94%E8%AE%B0%E5%A4%87%E4%BB%BD.html"},{default:t(()=>[s("Java语言完成notion笔记备份")]),_:1})]),n("li",null,[e(a,{to:"/software/unclassified/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF.html"},{default:t(()=>[s("前后端常用技术")]),_:1})]),n("li",null,[e(a,{to:"/software/middleware/es/ESRally%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%AD%A5%E9%AA%A4.html"},{default:t(()=>[s("ESRally性能测试步骤")]),_:1})]),n("li",null,[e(a,{to:"/other/GitHub%20Workflow%E7%AA%81%E7%84%B6%E6%8A%A5%E9%94%99.html"},{default:t(()=>[s("GitHub Workflow突然报错")]),_:1})])]),d,k,m,h])}const g=l(u,[["render",v],["__file","常用队列.html.vue"]]);export{g as default};
